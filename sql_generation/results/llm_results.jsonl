{"complexity": "Complex", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal) AS total_principal_paid, SUM(ap.actual_interest) AS total_interest_paid FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE l.loan_type = 'Amortizing' AND ap.actual_payment_date IS NOT NULL AND ap.actual_principal > 0 AND ap.actual_interest > 0 GROUP BY l.loan_id HAVING SUM(ap.actual_principal) > 100000000 AND SUM(ap.actual_interest) > 20000000 ORDER BY total_principal_paid DESC;"}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, b.company_name, l.loan_amount, l.effective_interest_rate, l.term FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentSchedules AS ( SELECT ep.loan_id, ep.schedule_number, ep.scheduled_principal, ep.scheduled_interest, ep.scheduled_tax FROM public.expected_payment ep ), CollateralDetails AS ( SELECT c.loan_id, c.collateral_id, c.appraisal_price, cd.oem_brand, cd.model_name FROM public.collateral c INNER JOIN public.collateral_detailed cd ON c.loan_id = cd.loan_id ) SELECT ld.loan_id, ld.borrower_id, cd.collateral_id, ps.scheduled_principal FROM LoanDetails ld INNER JOIN PaymentSchedules ps ON ld.loan_id = ps.loan_id INNER JOIN CollateralDetails cd ON ld.loan_id = cd.loan_id ORDER BY ld.loan_id, ps.schedule_number;"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, mc.contract_id, ap.actual_payment_date, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.actual_payment ap INNER JOIN public.loans l ON ap.loan_id = l.loan_id INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.master_contracts mc ON l.loan_id = mc.loan_id GROUP BY l.loan_id, b.company_name, mc.contract_id, ap.actual_payment_date ORDER BY ap.actual_payment_date DESC;"}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, b.company_name, l.loan_amount, l.effective_interest_rate, l.term FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentSchedules AS ( SELECT loan_id, schedule_number, scheduled_principal, scheduled_interest, scheduled_tax FROM public.expected_payment ), CollateralDetails AS ( SELECT c.loan_id, c.type, cd.oem_brand, cd.model_name FROM public.collateral c INNER JOIN public.collateral_detailed cd ON c.loan_id = cd.loan_id ) SELECT ld.loan_id, ld.company_name, ps.scheduled_principal, cd.type FROM LoanDetails ld INNER JOIN PaymentSchedules ps ON ld.loan_id = ps.loan_id INNER JOIN CollateralDetails cd ON ld.loan_id = cd.loan_id WHERE ld.loan_amount > 1000000 AND ps.scheduled_principal > 5000000 ORDER BY ld.loan_id, ps.scheduled_principal DESC;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(actual_principal) AS total_actual_principal, SUM(actual_interest) AS total_actual_interest FROM actual_payment GROUP BY loan_id ORDER BY total_actual_principal DESC;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal) AS total_principal_paid, SUM(ap.actual_interest) AS total_interest_paid FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_principal_paid DESC, total_interest_paid DESC;"}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total loan amount and total interest paid for each loan loan_amounts AS ( SELECT l.loan_id, l.loan_amount, COALESCE(SUM(lp.actual_principal), 0) AS total_principal_paid, COALESCE(SUM(lp.actual_interest), 0) AS total_interest_paid FROM loans l LEFT JOIN loan_payment lp ON l.loan_id = lp.loan_id GROUP BY l.loan_id, l.loan_amount ), -- Calculate total receivable amount for each contract contract_receivables AS ( SELECT mc.contract_id, mc.total_receivable_include_vat, mc.total_receivable_exclude_vat FROM master_contracts mc ), -- Combine loan and contract information loan_contract_info AS ( SELECT l.loan_id, mc.contract_id, l.loan_amount, mc.total_receivable_include_vat, mc.total_receivable_exclude_vat FROM loans l JOIN master_contracts mc ON l.loan_id = mc.loan_id ), -- Calculate profit for each loan loan_profits AS ( SELECT lci.loan_id, lci.contract_id, lci.loan_amount, lci.total_receivable_include_vat, lci.total_receivable_exclude_vat, la.total_principal_paid, la.total_interest_paid, (lci.total_receivable_include_vat - (la.total_principal_paid + la.total_interest_paid)) AS profit FROM loan_contract_info lci JOIN loan_amounts la ON lci.loan_id = la.loan_id ) SELECT lp.loan_id, lp.contract_id, lp.profit, lp.loan_amount FROM loan_profits lp ORDER BY lp.profit DESC;"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id HAVING SUM(ap.actual_principal + ap.actual_interest) > 100000000 ORDER BY total_actual_payment DESC;"}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total receivable amount including VAT for each loan total_receivable AS ( SELECT mc.loan_id, mc.total_receivable_include_vat FROM master_contracts mc ), -- Calculate total loan amount total_loan_amount AS ( SELECT l.loan_id, l.loan_amount FROM loans l ), -- Calculate actual payment details actual_payment_details AS ( SELECT ap.loan_id, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM actual_payment ap ) -- Select required columns SELECT tr.loan_id, tr.total_receivable_include_vat, tla.loan_amount, apd.actual_payment_date, apd.actual_principal, apd.actual_interest, apd.actual_interest_vat FROM total_receivable tr INNER JOIN total_loan_amount tla ON tr.loan_id = tla.loan_id INNER JOIN actual_payment_details apd ON tr.loan_id = apd.loan_id WHERE tr.loan_id IN ('G-V-SM-2023001', 'G-V-SM-2024003', 'E-V-E-2024004') ORDER BY tr.loan_id;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, mc.contract_id, ap.actual_payment_date, ap.actual_principal + ap.actual_interest AS total_payment, ap.actual_interest_vat FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id INNER JOIN public.master_contracts mc ON l.loan_id = mc.loan_id WHERE ap.actual_payment_date IS NOT NULL AND ap.actual_principal > 0 AND ap.actual_interest > 0 ORDER BY ap.actual_payment_date DESC;"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(scheduled_principal) AS total_scheduled_principal, SUM(scheduled_interest) AS total_scheduled_interest, SUM(scheduled_tax) AS total_scheduled_tax FROM expected_payment GROUP BY loan_id;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 AND ap.loan_id IN ( SELECT loan_id FROM public.loans WHERE loan_amount > 1000000000 ) GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"complexity": "Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, b.company_name, l.loan_amount, l.effective_interest_rate, l.term FROM loans l JOIN borrower b ON l.borrower_id = b.borrower_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_principal, ap.actual_interest, ap.actual_payment_date FROM actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, ld.company_name, pd.schedule_number, pd.actual_payment_date FROM LoanDetails ld JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id WHERE pd.actual_payment_date IS NOT NULL AND ld.loan_amount > 1000000 ORDER BY pd.actual_payment_date DESC;"}
{"complexity": "Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, b.company_name, l.loan_amount, l.effective_interest_rate, mc.total_receivable_include_vat FROM loans l JOIN borrower b ON l.borrower_id = b.borrower_id JOIN master_contracts mc ON l.loan_id = mc.loan_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM actual_payment ap ) SELECT ld.loan_id, ld.company_name, pd.actual_payment_date, (pd.actual_principal + pd.actual_interest + pd.actual_interest_vat) AS total_payment FROM LoanDetails ld JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id WHERE pd.actual_payment_date IS NOT NULL ORDER BY pd.actual_payment_date DESC;"}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total receivable amount for each loan LoanReceivables AS ( SELECT mc.loan_id, mc.total_receivable_include_vat, mc.term, mc.daily_fee_include_vat, mc.number_of_evs FROM master_contracts mc ), -- Calculate total loan payables for each loan LoanPayables AS ( SELECT ml.loan_id, ml.total_loan_payables, ml.loan_tenure FROM master_loans ml ), -- Combine loan receivables and payables LoanFinancials AS ( SELECT lr.loan_id, lr.total_receivable_include_vat, lr.term, lp.total_loan_payables, lp.loan_tenure FROM LoanReceivables lr INNER JOIN LoanPayables lp ON lr.loan_id = lp.loan_id ), -- Calculate key financial metrics for each loan LoanMetrics AS ( SELECT lf.loan_id, lf.total_receivable_include_vat, lf.term, lf.total_loan_payables, lf.loan_tenure, (lf.total_receivable_include_vat / lf.term) AS monthly_receivable, (lf.total_loan_payables / lf.loan_tenure) AS monthly_payable FROM LoanFinancials lf ) -- Select required columns SELECT lm.loan_id, lm.total_receivable_include_vat, lm.monthly_receivable, lm.monthly_payable FROM LoanMetrics lm ORDER BY lm.loan_id;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE l.loan_type = 'Amortizing' AND b.country = 'INDONESIA' AND ap.actual_payment_date IS NOT NULL GROUP BY l.loan_id, b.company_name HAVING SUM(ap.actual_principal + ap.actual_interest) > 100000000 ORDER BY total_actual_payment DESC;"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(actual_principal) FROM actual_payment WHERE actual_payment_date > '2024-01-01' GROUP BY loan_id ORDER BY SUM(actual_principal) DESC;"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE ap.actual_payment_date IS NOT NULL GROUP BY l.loan_id HAVING SUM(ap.actual_principal + ap.actual_interest) > 1000000"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id HAVING SUM(ap.actual_principal + ap.actual_interest) > 100000000 ORDER BY total_actual_payment DESC;"}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, b.company_name, l.loan_amount, l.effective_interest_rate, l.term FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentSchedules AS ( SELECT loan_id, schedule_number, scheduled_principal, scheduled_interest, scheduled_tax FROM public.expected_payment ), CollateralDetails AS ( SELECT c.loan_id, c.type, cd.motorcycle_id, cd.oem_brand, cd.model_name FROM public.collateral c INNER JOIN public.collateral_detailed cd ON c.loan_id = cd.loan_id ) SELECT ld.loan_id, ld.borrower_id, ps.scheduled_principal, cd.type FROM LoanDetails ld INNER JOIN PaymentSchedules ps ON ld.loan_id = ps.loan_id INNER JOIN CollateralDetails cd ON ld.loan_id = cd.loan_id WHERE ld.loan_amount > 1000000 ORDER BY ld.loan_id, ps.schedule_number;"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(scheduled_principal) AS total_scheduled_principal FROM expected_payment GROUP BY loan_id ORDER BY total_scheduled_principal DESC;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal) AS total_principal_paid, SUM(ap.actual_interest) AS total_interest_paid FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE ap.actual_payment_date IS NOT NULL GROUP BY l.loan_id HAVING SUM(ap.actual_principal) > 100000000 AND SUM(ap.actual_interest) > 20000000 ORDER BY total_principal_paid DESC;"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(actual_principal + actual_interest) AS total_actual_payment FROM actual_payment GROUP BY loan_id ORDER BY total_actual_payment DESC;"}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total receivable amount including VAT for each loan total_receivable AS ( SELECT mc.loan_id, mc.total_receivable_include_vat, mc.term, mc.daily_fee_include_vat, mc.number_of_evs FROM master_contracts mc ), -- Calculate total loan payables for each loan loan_payables AS ( SELECT ml.loan_id, ml.total_loan_payables, ml.loan_tenure FROM master_loans ml ), -- Combine total receivable and loan payables combined AS ( SELECT tr.loan_id, tr.total_receivable_include_vat, tr.term, tr.daily_fee_include_vat, tr.number_of_evs, lp.total_loan_payables, lp.loan_tenure FROM total_receivable tr INNER JOIN loan_payables lp ON tr.loan_id = lp.loan_id ), -- Calculate daily fee and total principal daily_fee_principal AS ( SELECT c.loan_id, c.daily_fee_include_vat, mc.total_principal FROM combined c INNER JOIN master_contracts mc ON c.loan_id = mc.loan_id ) -- Select required columns SELECT dfp.loan_id, dfp.daily_fee_include_vat AS daily_fee, dfp.total_principal, lr.total_loan_payables, mc.term FROM daily_fee_principal dfp INNER JOIN loan_payables lr ON dfp.loan_id = lr.loan_id INNER JOIN master_contracts mc ON dfp.loan_id = mc.loan_id ORDER BY dfp.loan_id;"}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total receivable amount including VAT for each contract contract_receivable AS ( SELECT mc.contract_id, mc.loan_id, mc.total_receivable_include_vat, mc.term, mc.daily_fee_include_vat, mc.number_of_evs FROM public.master_contracts mc ), -- Calculate total loan payables for each loan loan_payables AS ( SELECT ml.loan_id, ml.total_loan_payables, ml.interest_from_bank FROM public.master_loans ml ), -- Calculate actual payment and scheduled payment for each loan payment_info AS ( SELECT ap.loan_id, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ep.scheduled_installment_date, ep.scheduled_principal, ep.scheduled_interest FROM public.actual_payment ap JOIN public.expected_payment ep ON ap.loan_id = ep.loan_id AND ap.schedule_number = ep.schedule_number ), -- Combine loan information with payment information loan_payment_info AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, lpii.actual_payment_date, lpii.actual_principal, lpii.actual_interest, lpii.scheduled_installment_date, lpii.scheduled_principal, lpii.scheduled_interest FROM public.loans l JOIN payment_info lpii ON l.loan_id = lpii.loan_id ), -- Combine contract information with loan payment information contract_payment_info AS ( SELECT cri.contract_id, cri.loan_id, cri.total_receivable_include_vat, lpi.borrower_id, lpi.loan_amount, lpi.effective_interest_rate, lpi.actual_payment_date, lpi.actual_principal, lpi.actual_interest, lpi.scheduled_installment_date, lpi.scheduled_principal, lpi.scheduled_interest FROM contract_receivable cri JOIN loan_payment_info lpi ON cri.loan_id = lpi.loan_id ) -- Select required columns SELECT cpi.contract_id, cpi.borrower_id, cpi.actual_payment_date, cpi.total_receivable_include_vat FROM contract_payment_info cpi ORDER BY cpi.contract_id, cpi.borrower_id;"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.actual_payment ap INNER JOIN public.loans l ON ap.loan_id = l.loan_id INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id GROUP BY l.loan_id, b.company_name HAVING SUM(ap.actual_principal + ap.actual_interest) > 100000000 ORDER BY total_actual_payment DESC;"}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total receivable and total VAT for each contract ContractFinancials AS ( SELECT mc.contract_id, mc.loan_id, mc.total_receivable_include_vat, mc.total_vat, mc.term, mc.daily_fee_include_vat, mc.number_of_evs FROM public.master_contracts mc ), -- Calculate total loan payables and interest from bank for each loan LoanFinancials AS ( SELECT ml.loan_id, ml.total_loan_payables, ml.interest_from_bank, ml.loan_tenure FROM public.master_loans ml ), -- Combine contract and loan financials CombinedFinancials AS ( SELECT cf.contract_id, cf.loan_id, cf.total_receivable_include_vat, cf.total_vat, cf.term, lf.total_loan_payables, lf.interest_from_bank, lf.loan_tenure FROM ContractFinancials cf INNER JOIN LoanFinancials lf ON cf.loan_id = lf.loan_id ), -- Calculate key performance indicators (KPIs) for each loan LoanKPIs AS ( SELECT cf.loan_id, cf.total_receivable_include_vat, cf.total_vat, (cf.total_receivable_include_vat / cf.term) AS monthly_receivable, lf.total_loan_payables, lf.interest_from_bank * lf.loan_tenure AS total_interest FROM CombinedFinancials cf INNER JOIN LoanFinancials lf ON cf.loan_id = lf.loan_id ) -- Select relevant columns for analysis SELECT lk.loan_id, lk.total_receivable_include_vat, lk.total_vat, lk.monthly_receivable FROM LoanKPIs lk ORDER BY lk.loan_id;"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE ap.actual_payment_date IS NOT NULL GROUP BY l.loan_id HAVING SUM(ap.actual_principal + ap.actual_interest) > 1000000 ORDER BY total_actual_payment DESC;"}
{"complexity": "Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, b.company_name, l.loan_amount, l.effective_interest_rate, mc.total_receivable_include_vat FROM loans l JOIN borrower b ON l.borrower_id = b.borrower_id JOIN master_contracts mc ON l.loan_id = mc.loan_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM actual_payment ap ) SELECT ld.loan_id, ld.company_name, ld.loan_amount, ld.effective_interest_rate, pd.actual_payment_date, pd.actual_principal + pd.actual_interest + pd.actual_interest_vat AS total_payment FROM LoanDetails ld JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id WHERE pd.actual_payment_date IS NOT NULL ORDER BY pd.actual_payment_date DESC;"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(actual_principal) AS total_actual_principal, SUM(actual_interest) AS total_actual_interest FROM actual_payment GROUP BY loan_id ORDER BY total_actual_principal DESC;"}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total actual payments for each loan TotalActualPayments AS ( SELECT ap.loan_id, SUM(ap.actual_principal + ap.actual_interest + ap.actual_other_fees) AS total_actual_payment FROM actual_payment ap GROUP BY ap.loan_id ), -- Calculate total scheduled payments for each loan TotalScheduledPayments AS ( SELECT ep.loan_id, SUM(ep.scheduled_principal + ep.scheduled_interest + ep.scheduled_other_fees) AS total_scheduled_payment FROM expected_payment ep GROUP BY ep.loan_id ), -- Calculate loan details LoanDetails AS ( SELECT l.loan_id, l.loan_amount, l.effective_interest_rate, mc.term, mc.daily_fee_include_vat, mc.number_of_evs FROM loans l JOIN master_contracts mc ON l.loan_id = mc.loan_id ), -- Combine loan details with total payments CombinedPayments AS ( SELECT tap.loan_id, tap.total_actual_payment, tsp.total_scheduled_payment, ld.loan_amount, ld.effective_interest_rate, ld.term, ld.daily_fee_include_vat, ld.number_of_evs FROM TotalActualPayments tap JOIN TotalScheduledPayments tsp ON tap.loan_id = tsp.loan_id JOIN LoanDetails ld ON tap.loan_id = ld.loan_id ) -- Select required columns SELECT loan_id, total_actual_payment, total_scheduled_payment, loan_amount FROM CombinedPayments ORDER BY loan_id;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, mc.contract_id, SUM(ap.actual_principal + ap.actual_interest) AS total_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.master_contracts mc ON l.loan_id = mc.loan_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name, mc.contract_id ORDER BY total_payment DESC LIMIT 10;"}
