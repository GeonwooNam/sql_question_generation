{"is_fixed": 0, "complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ), CollateralDetails AS ( SELECT c.loan_id, c.collateral_id, c.type, c.appraisal_price FROM public.collateral c ) SELECT ld.loan_id, ld.borrower_id, SUM(pd.actual_principal) AS total_principal_paid, COUNT(DISTINCT ccd.collateral_id) AS number_of_collaterals FROM LoanDetails ld INNER JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id INNER JOIN CollateralDetails ccd ON ld.loan_id = ccd.loan_id GROUP BY ld.loan_id, ld.borrower_id ORDER BY ld.loan_id;"}
{"is_fixed": 0, "complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id ORDER BY total_actual_payment DESC;"}
{"is_fixed": 1, "complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country, b.\"state/province/city\" FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ), CollateralDetails AS ( SELECT c.loan_id, c.type, c.appraisal_price, cd.motorcycle_id, cd.oem_brand, cd.model_name FROM public.collateral c INNER JOIN public.collateral_detailed cd ON c.loan_id = cd.loan_id ) SELECT ld.loan_id, ld.borrower_id, ld.company_name, pd.schedule_number, cd.type AS collateral_type, cd.appraisal_price, pd.actual_payment_date, pd.actual_principal, COALESCE(pd.actual_interest_vat, 0) AS actual_interest_vat FROM LoanDetails ld INNER JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id INNER JOIN CollateralDetails cd ON ld.loan_id = cd.loan_id ORDER BY ld.loan_id, pd.schedule_number;"}
{"is_fixed": 0, "complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"is_fixed": 1, "complexity": "Simple", "sql_query": "SELECT loan_id, schedule_number, actual_payment_date, actual_principal, actual_interest, COALESCE(actual_other_fees, 0) AS actual_other_fees, actual_interest_vat, COALESCE(\"late_fee_&_other_charges\", 0) AS \"late_fee_&_other_charges\", COALESCE(discount_given_principal, 0) AS discount_given_principal, COALESCE(discount_given_interests, 0) AS discount_given_interests, COALESCE(discount_given_vat, 0) AS discount_given_vat, COALESCE(refinanced_amount, 0) AS refinanced_amount, COALESCE(recoverd_concept, '') AS recoverd_concept, COALESCE(recovered_principal, 0) AS recovered_principal, COALESCE(recovered_non_principal, 0) AS recovered_non_principal FROM actual_payment WHERE actual_payment_date IS NOT NULL AND actual_principal > 0 AND actual_interest > 0 ORDER BY actual_payment_date DESC LIMIT 1;"}
{"is_fixed": 0, "complexity": "Complex", "sql_query": "SELECT l.loan_id, b.borrower_id, mc.contract_id, ap.loan_id_schedule, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.actual_payment ap INNER JOIN public.loans l ON ap.loan_id = l.loan_id INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.master_contracts mc ON l.loan_id = mc.loan_id GROUP BY l.loan_id, b.borrower_id, mc.contract_id, ap.loan_id_schedule ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, b.company_name, b.country FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, ld.company_name, SUM(pd.actual_principal + pd.actual_interest + pd.actual_interest_vat) AS total_payment FROM LoanDetails ld INNER JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id GROUP BY ld.loan_id, ld.borrower_id, ld.company_name ORDER BY total_payment DESC;"}
{"is_fixed": 0, "complexity": "Highly Complex", "sql_query": "WITH loan_info AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit FROM public.loans l ), borrower_info AS ( SELECT b.borrower_id, b.company_name, b.country, b.\"state/province/city\" FROM public.borrower b ), payment_info AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ), first_delivery_info AS ( SELECT bdf.loan_id, bdf.introduction_id, bdf.first_month_evs, bdf.first_month_days, bdf.first_month_total_usage FROM public.bike_deliveries_first bdf ) SELECT li.loan_id, bi.company_name, pi.actual_payment_date, fdi.first_month_evs FROM loan_info li INNER JOIN borrower_info bi ON li.borrower_id = bi.borrower_id INNER JOIN payment_info pi ON li.loan_id = pi.loan_id INNER JOIN first_delivery_info fdi ON li.loan_id = fdi.loan_id GROUP BY li.loan_id, bi.company_name, pi.actual_payment_date, fdi.first_month_evs ORDER BY li.loan_id, bi.company_name, pi.actual_payment_date, fdi.first_month_evs;"}
{"is_fixed": 0, "complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id ORDER BY total_actual_payment DESC;"}
{"is_fixed": 1, "complexity": "Simple", "sql_query": "SELECT loan_id, schedule_number, actual_payment_date, actual_principal, actual_interest, actual_interest_vat, COALESCE(\"late_fee_&_other_charges\", 0) AS \"late_fee_&_other_charges\" FROM actual_payment WHERE actual_payment_date IS NOT NULL AND actual_principal > 0 AND actual_interest > 0 AND \"late_fee_&_other_charges\" IS NOT NULL ORDER BY actual_payment_date DESC LIMIT 1;"}
{"is_fixed": 0, "complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE l.loan_type = 'Amortizing' AND ap.actual_payment_date IS NOT NULL GROUP BY l.loan_id ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Moderate", "sql_query": "SELECT l.loan_id, b.borrower_id, lp.schedule_no, lp.payment_schedule, lp.principal, lp.interest FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.loan_payment lp ON l.loan_id = lp.loan_id WHERE l.loan_id IN ( SELECT loan_id FROM public.loan_payment GROUP BY loan_id HAVING COUNT(loan_id) > 10 ) AND lp.payment_schedule > '2024-01-01' ORDER BY l.loan_id, lp.schedule_no;"}
{"is_fixed": 1, "complexity": "Highly Complex", "sql_query": "WITH contract_receivable AS ( SELECT mc.contract_id, mc.loan_id, mc.total_receivable_include_vat, mc.term, mc.daily_fee_include_vat, mc.number_of_evs FROM public.master_contracts mc ), loan_payables AS ( SELECT ml.loan_id, ml.total_loan_payables, ml.interest_from_bank, ml.loan_tenure FROM public.master_loans ml ), combined_info AS ( SELECT cr.contract_id, cr.loan_id, cr.total_receivable_include_vat, cr.term, cr.daily_fee_include_vat, cr.number_of_evs, lp.total_loan_payables, lp.interest_from_bank, lp.loan_tenure FROM contract_receivable cr INNER JOIN loan_payables lp ON cr.loan_id = lp.loan_id ), kpis AS ( SELECT ci.contract_id, ci.loan_id, ci.total_receivable_include_vat, ci.term, ci.daily_fee_include_vat, ci.number_of_evs, ci.total_loan_payables, ci.interest_from_bank, ci.loan_tenure, CASE WHEN ci.total_loan_payables = 0 OR ci.total_receivable_include_vat IS NULL OR ci.total_loan_payables IS NULL THEN NULL ELSE ci.total_receivable_include_vat / ci.total_loan_payables END AS kpi_ratio FROM combined_info ci ) SELECT k.contract_id, k.loan_id, k.total_receivable_include_vat, k.total_loan_payables, k.kpi_ratio FROM kpis k WHERE k.kpi_ratio IS NOT NULL ORDER BY k.kpi_ratio DESC LIMIT 1;"}
{"is_fixed": 1, "complexity": "Simple", "sql_query": "SELECT loan_id, schedule_number, actual_payment_date, actual_principal, actual_interest, actual_interest_vat, COALESCE(\"late_fee_&_other_charges\", 0) AS \"late_fee_&_other_charges\" FROM actual_payment WHERE actual_payment_date IS NOT NULL AND actual_principal > 0 AND actual_interest > 0 AND \"late_fee_&_other_charges\" IS NOT NULL ORDER BY actual_payment_date DESC LIMIT 1;"}
{"is_fixed": 0, "complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Simple", "sql_query": "SELECT loan_id, schedule_number, actual_payment_date, actual_principal, actual_interest, actual_interest_vat FROM actual_payment WHERE actual_payment_date IS NOT NULL AND actual_principal > 0 AND actual_interest > 0 ORDER BY actual_payment_date DESC;"}
{"is_fixed": 0, "complexity": "Highly Complex", "sql_query": "WITH LoanSummary AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country, b.\"state/province/city\" FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentSummary AS ( SELECT ap.loan_id, SUM(ap.actual_principal) AS total_principal, SUM(ap.actual_interest) AS total_interest, SUM(ap.actual_other_fees) AS total_fees, SUM(ap.actual_interest_vat) AS total_vat FROM public.actual_payment ap GROUP BY ap.loan_id ), CollateralSummary AS ( SELECT c.loan_id, COUNT(c.collateral_id) AS collateral_count, SUM(c.appraisal_price) AS total_appraisal_price FROM public.collateral c GROUP BY c.loan_id ) SELECT ls.loan_id, ls.borrower_id, ls.loan_amount, ps.total_principal, cs.collateral_count FROM LoanSummary ls INNER JOIN PaymentSummary ps ON ls.loan_id = ps.loan_id INNER JOIN CollateralSummary cs ON ls.loan_id = cs.loan_id ORDER BY ls.loan_id;"}
{"is_fixed": 0, "complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, bc.contract_id, bc.total_receivable_include_vat, bc.total_receivable_exclude_vat, bc.total_principal, bc.total_vat FROM public.loans l INNER JOIN public.master_contracts bc ON l.loan_id = bc.loan_id ), PaymentSchedules AS ( SELECT ep.loan_id, ep.schedule_number, ep.scheduled_installment_date, ep.scheduled_principal, ep.scheduled_interest, ep.scheduled_tax FROM public.expected_payment ep ), ActualPayments AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, ps.schedule_number, COALESCE(ap.actual_payment_date, ps.scheduled_installment_date) AS payment_date, COALESCE(ap.actual_principal, ps.scheduled_principal) AS principal, COALESCE(ap.actual_interest, ps.scheduled_interest) AS interest, COALESCE(ap.actual_interest_vat, ps.scheduled_tax * 0.11) AS interest_vat, ld.total_receivable_include_vat FROM LoanDetails ld INNER JOIN PaymentSchedules ps ON ld.loan_id = ps.loan_id LEFT JOIN ActualPayments ap ON ld.loan_id = ap.loan_id AND ps.schedule_number = ap.schedule_number ORDER BY ld.loan_id, ps.schedule_number;"}
{"is_fixed": 0, "complexity": "Moderate", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE ap.actual_payment_date IS NOT NULL GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, m.contract_date, m.total_receivable_include_vat, m.total_receivable_exclude_vat, m.total_vat FROM public.loans l INNER JOIN public.master_contracts m ON l.loan_id = m.loan_id ), PaymentSchedules AS ( SELECT ep.loan_id, ep.schedule_number, ep.scheduled_principal, ep.scheduled_interest, ep.scheduled_tax FROM public.expected_payment ep ), ActualPayments AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, SUM(ps.scheduled_principal) AS total_scheduled_principal, SUM(ap.actual_principal) AS total_actual_principal FROM LoanDetails ld INNER JOIN PaymentSchedules ps ON ld.loan_id = ps.loan_id INNER JOIN ActualPayments ap ON ld.loan_id = ap.loan_id AND ps.schedule_number = ap.schedule_number GROUP BY ld.loan_id, ld.borrower_id ORDER BY ld.loan_id;"}
{"is_fixed": 0, "complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Complex", "sql_query": "SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM actual_payment ap INNER JOIN loans l ON ap.loan_id = l.loan_id INNER JOIN borrower b ON l.borrower_id = b.borrower_id WHERE b.country = 'INDONESIA' AND ap.actual_payment_date IS NOT NULL AND ap.actual_principal > 0 AND ap.actual_interest > 0 ORDER BY ap.actual_payment_date DESC;"}
{"is_fixed": 0, "complexity": "Simple", "sql_query": "SELECT loan_id, SUM(actual_principal) AS total_actual_principal FROM actual_payment WHERE actual_payment_date > '2024-01-01' GROUP BY loan_id ORDER BY total_actual_principal DESC;"}
{"is_fixed": 0, "complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country, b.\"state/province/city\" FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentSchedules AS ( SELECT ep.loan_id, ep.schedule_number, ep.scheduled_installment_date, ep.scheduled_principal, ep.scheduled_interest, ep.scheduled_tax FROM public.expected_payment ep ), ActualPayments AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, ps.scheduled_installment_date, COALESCE(ap.actual_payment_date, ps.scheduled_installment_date) AS payment_date, ps.scheduled_principal AS scheduled_amount, ap.actual_principal AS actual_amount, ps.scheduled_interest AS scheduled_interest, ap.actual_interest AS actual_interest FROM LoanDetails ld INNER JOIN PaymentSchedules ps ON ld.loan_id = ps.loan_id LEFT JOIN ActualPayments ap ON ld.loan_id = ap.loan_id AND ps.schedule_number = ap.schedule_number ORDER BY ld.loan_id, ps.scheduled_installment_date;"}
{"is_fixed": 0, "complexity": "Complex", "sql_query": "SELECT l.loan_id, b.borrower_id, SUM(ap.actual_principal) AS total_principal_paid, SUM(ap.actual_interest) AS total_interest_paid FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.borrower_id ORDER BY total_principal_paid DESC;"}
{"is_fixed": 0, "complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country, b.\"state/province/city\" FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentSchedules AS ( SELECT ep.loan_id, ep.schedule_number, ep.scheduled_installment_date, ep.scheduled_principal, ep.scheduled_interest, ep.scheduled_tax FROM public.expected_payment ep ), ActualPayments AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, ls.schedule_number, ls.scheduled_principal + ls.scheduled_interest + ls.scheduled_tax AS total_scheduled_payment, ap.actual_principal + ap.actual_interest + ap.actual_interest_vat AS total_actual_payment FROM LoanDetails ld INNER JOIN PaymentSchedules ls ON ld.loan_id = ls.loan_id LEFT JOIN ActualPayments ap ON ld.loan_id = ap.loan_id AND ls.schedule_number = ap.schedule_number ORDER BY ld.loan_id, ls.schedule_number;"}
{"is_fixed": 0, "complexity": "Simple", "sql_query": "SELECT loan_id, SUM(actual_principal + actual_interest) AS total_actual_payment FROM actual_payment GROUP BY loan_id ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Moderate", "sql_query": "SELECT l.loan_id, b.borrower_id, mc.contract_id, ap.schedule_number, ap.actual_payment_date FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.master_contracts mc ON l.loan_id = mc.loan_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE l.loan_id IN ( SELECT loan_id FROM public.loans WHERE loan_amount > 1000000000 ) ORDER BY ap.actual_payment_date;"}
{"is_fixed": 0, "complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country FROM loans l JOIN borrower b ON l.borrower_id = b.borrower_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM actual_payment ap ), CollateralDetails AS ( SELECT c.loan_id, c.type, c.appraisal_price, cd.motorcycle_id, cd.oem_brand, cd.model_name FROM collateral c JOIN collateral_detailed cd ON c.loan_id = cd.loan_id ) SELECT ld.loan_id, ld.borrower_id, pd.schedule_number, cd.type AS collateral_type FROM LoanDetails ld JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id JOIN CollateralDetails cd ON ld.loan_id = cd.loan_id GROUP BY ld.loan_id, ld.borrower_id, pd.schedule_number, cd.type ORDER BY ld.loan_id, pd.schedule_number;"}
{"is_fixed": 0, "complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Highly Complex", "sql_query": "WITH loan_info AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, b.company_name, b.country FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), payment_info AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ), contract_info AS ( SELECT mc.contract_id, mc.loan_id, mc.contract_date, mc.term, mc.daily_fee_include_vat FROM public.master_contracts mc ) SELECT li.loan_id, li.borrower_id, ci.contract_date, pi.schedule_number, pi.actual_payment_date, pi.actual_principal + pi.actual_interest + pi.actual_interest_vat AS total_payment, li.loan_amount FROM loan_info li INNER JOIN payment_info pi ON li.loan_id = pi.loan_id INNER JOIN contract_info ci ON li.loan_id = ci.loan_id GROUP BY li.loan_id, li.borrower_id, ci.contract_date, pi.schedule_number, pi.actual_payment_date, pi.actual_principal, pi.actual_interest, pi.actual_interest_vat, li.loan_amount ORDER BY li.loan_id, pi.schedule_number;"}
{"is_fixed": 0, "complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Moderate", "sql_query": "SELECT l.loan_id, b.borrower_id, SUM(ap.actual_principal) AS total_principal_paid, SUM(ap.actual_interest) AS total_interest_paid FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.borrower_id ORDER BY total_principal_paid DESC;"}
{"is_fixed": 1, "complexity": "Complex", "sql_query": "SELECT l.loan_id, ap.actual_payment_date, COALESCE(ap.actual_principal + ap.actual_interest + ap.actual_other_fees + ap.actual_interest_vat, 0) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE ap.actual_payment_date IS NOT NULL AND ap.actual_principal > 0 AND ap.actual_interest > 0 ORDER BY ap.actual_payment_date DESC;"}
{"is_fixed": 1, "complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country, b.\"state/province/city\" FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentSchedules AS ( SELECT ep.loan_id, ep.schedule_number, ep.scheduled_principal, ep.scheduled_interest, ep.scheduled_tax FROM public.expected_payment ep ), ActualPayments AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, ls.schedule_number, COALESCE(ap.actual_principal, ls.scheduled_principal) AS principal_payment FROM LoanDetails ld INNER JOIN PaymentSchedules ls ON ld.loan_id = ls.loan_id LEFT JOIN ActualPayments ap ON ld.loan_id = ap.loan_id AND ls.schedule_number = ap.schedule_number ORDER BY ld.loan_id, ls.schedule_number LIMIT 1;"}
{"is_fixed": 0, "complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2025 GROUP BY l.loan_id ORDER BY total_actual_payment DESC;"}
{"is_fixed": 0, "complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, b.company_name, b.country FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ), CollateralDetails AS ( SELECT c.loan_id, c.type, c.appraisal_price, cd.motorcycle_id, cd.oem_brand FROM public.collateral c INNER JOIN public.collateral_detailed cd ON c.loan_id = cd.loan_id ) SELECT ld.loan_id, ld.borrower_id, pd.schedule_number, cd.type AS collateral_type, SUM(pd.actual_principal + pd.actual_interest) AS total_payment FROM LoanDetails ld INNER JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id INNER JOIN CollateralDetails cd ON ld.loan_id = cd.loan_id GROUP BY ld.loan_id, ld.borrower_id, pd.schedule_number, cd.type ORDER BY ld.loan_id, pd.schedule_number;"}
{"is_fixed": 0, "complexity": "Simple", "sql_query": "SELECT loan_id, SUM(scheduled_principal) AS total_scheduled_principal, SUM(scheduled_interest) AS total_scheduled_interest FROM expected_payment WHERE loan_id IN ( SELECT loan_id FROM loans WHERE loan_type = 'Amortizing' ) GROUP BY loan_id ORDER BY total_scheduled_principal DESC;"}
{"is_fixed": 0, "complexity": "Highly Complex", "sql_query": "WITH loan_info AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, b.company_name, b.country FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), payment_info AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ), delivery_info AS ( SELECT bd.loan_id, bd.introduction_id, bd.contract_id, bd.first_month_evs, bd.first_month_days, bd.first_month_total_usage FROM public.bike_deliveries_first bd ) SELECT li.loan_id, li.borrower_id, pi.schedule_number, di.first_month_evs FROM loan_info li INNER JOIN payment_info pi ON li.loan_id = pi.loan_id INNER JOIN delivery_info di ON li.loan_id = di.loan_id WHERE li.loan_amount > 1000000 AND pi.actual_payment_date > '2024-01-01' AND di.first_month_evs > 100 ORDER BY li.loan_id, pi.schedule_number;"}
{"is_fixed": 0, "complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, mc.contract_id, mc.total_receivable_include_vat, mc.total_receivable_exclude_vat, mc.total_principal, mc.total_vat FROM public.loans l INNER JOIN public.master_contracts mc ON l.loan_id = mc.loan_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ), CollateralDetails AS ( SELECT c.loan_id, c.collateral_id, cd.motorcycle_id, cd.oem_brand, cd.model_name FROM public.collateral c INNER JOIN public.collateral_detailed cd ON c.loan_id = cd.loan_id ) SELECT ld.loan_id, ld.borrower_id, ld.total_receivable_include_vat, pd.actual_payment_date FROM LoanDetails ld INNER JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id INNER JOIN CollateralDetails cd ON ld.loan_id = cd.loan_id GROUP BY ld.loan_id, ld.borrower_id, ld.total_receivable_include_vat, pd.actual_payment_date ORDER BY ld.loan_id, pd.actual_payment_date;"}
{"is_fixed": 1, "complexity": "Complex", "sql_query": "SELECT l.loan_id, ap.actual_payment_date, COALESCE(ap.actual_principal + ap.actual_interest + ap.actual_other_fees + ap.actual_interest_vat, 0) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE ap.loan_id_schedule LIKE 'G-V-SM-2024003-%' ORDER BY ap.actual_payment_date;"}
{"is_fixed": 0, "complexity": "Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, bc.contract_id, bc.term, bc.daily_fee_include_vat, bc.number_of_evs FROM loans l JOIN master_contracts bc ON l.loan_id = bc.loan_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, SUM(pd.actual_principal + pd.actual_interest + pd.actual_interest_vat) AS total_payment FROM LoanDetails ld JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id GROUP BY ld.loan_id, ld.borrower_id ORDER BY ld.loan_id;"}
