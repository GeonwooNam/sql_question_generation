{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.borrower_id, SUM(ap.actual_principal) AS total_principal_paid, SUM(ap.actual_interest) AS total_interest_paid FROM loans l JOIN borrower b ON l.borrower_id = b.borrower_id JOIN actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.borrower_id ORDER BY total_principal_paid DESC;"}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total receivable and paid amounts for each loan LoanAmounts AS ( SELECT l.loan_id, l.borrower_id, mc.total_receivable_include_vat, SUM(ap.actual_principal + ap.actual_interest + ap.actual_other_fees) AS total_paid FROM loans l JOIN master_contracts mc ON l.loan_id = mc.loan_id LEFT JOIN actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, l.borrower_id, mc.total_receivable_include_vat ), -- Calculate loan and payment statistics LoanStatistics AS ( SELECT la.loan_id, la.borrower_id, la.total_receivable_include_vat, la.total_paid, (la.total_paid / la.total_receivable_include_vat) * 100 AS payment_percentage FROM LoanAmounts la ), -- Get borrower details BorrowerDetails AS ( SELECT b.borrower_id, b.company_name, b.type, b.country, b.\"state/province/city\" FROM borrower b ) -- Select required columns with JOINs SELECT ls.loan_id, bd.company_name, ls.total_receivable_include_vat, ls.payment_percentage FROM LoanStatistics ls JOIN BorrowerDetails bd ON ls.borrower_id = bd.borrower_id ORDER BY ls.payment_percentage DESC;"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id ORDER BY total_actual_payment DESC;"}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total actual payments for each loan TotalActualPayments AS ( SELECT ap.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM actual_payment ap GROUP BY ap.loan_id ), -- Calculate total scheduled payments for each loan TotalScheduledPayments AS ( SELECT ep.loan_id, SUM(ep.scheduled_principal + ep.scheduled_interest) AS total_scheduled_payment FROM expected_payment ep GROUP BY ep.loan_id ), -- Calculate loan details LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate FROM loans l ), -- Combine loan details with total actual and scheduled payments CombinedPayments AS ( SELECT LD.loan_id, LD.borrower_id, LD.loan_amount, LD.effective_interest_rate, TAP.total_actual_payment, TSP.total_scheduled_payment FROM LoanDetails LD INNER JOIN TotalActualPayments TAP ON LD.loan_id = TAP.loan_id INNER JOIN TotalScheduledPayments TSP ON LD.loan_id = TSP.loan_id ) -- Final query SELECT CP.loan_id, CP.borrower_id, CP.loan_amount, CP.effective_interest_rate, (CP.total_actual_payment / CP.total_scheduled_payment) * 100 AS payment_efficiency FROM CombinedPayments CP ORDER BY CP.loan_id;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, l.borrower_id, b.company_name, SUM(ap.actual_principal) AS total_actual_principal FROM loans l INNER JOIN borrower b ON l.borrower_id = b.borrower_id INNER JOIN actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, l.borrower_id, b.company_name ORDER BY total_actual_principal DESC;"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(scheduled_principal) AS total_scheduled_principal, SUM(scheduled_interest) AS total_scheduled_interest, SUM(scheduled_tax) AS total_scheduled_tax FROM expected_payment GROUP BY loan_id ORDER BY loan_id;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.borrower_id, SUM(ap.actual_principal) AS total_principal_paid, SUM(ap.actual_interest) AS total_interest_paid FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.borrower_id ORDER BY total_principal_paid DESC;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_payment DESC;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total receivable amount for each loan LoanReceivables AS ( SELECT mc.loan_id, mc.total_receivable_include_vat, mc.days, mc.number_of_evs, mc.cost_per_unit FROM master_contracts mc ), -- Calculate total loan payables for each loan LoanPayables AS ( SELECT ml.loan_id, ml.total_loan_payables, ml.interest_from_bank FROM master_loans ml ), -- Combine loan receivables and payables LoanFinancials AS ( SELECT lr.loan_id, lr.total_receivable_include_vat, lr.days, lr.number_of_evs, lr.cost_per_unit, lp.total_loan_payables, lp.interest_from_bank FROM LoanReceivables lr INNER JOIN LoanPayables lp ON lr.loan_id = lp.loan_id ), -- Calculate key financial metrics for each loan LoanMetrics AS ( SELECT lf.loan_id, lf.total_receivable_include_vat / lf.days AS daily_revenue, lf.total_loan_payables * lf.interest_from_bank AS interest_payable, lf.total_receivable_include_vat - lf.total_loan_payables AS net_profit FROM LoanFinancials lf ), -- Combine loan metrics with borrower information BorrowerMetrics AS ( SELECT lm.loan_id, lm.daily_revenue, lm.interest_payable, lm.net_profit, b.borrower_id, b.company_name FROM LoanMetrics lm INNER JOIN loans l ON lm.loan_id = l.loan_id INNER JOIN borrower b ON l.borrower_id = b.borrower_id ) SELECT bm.loan_id, bm.borrower_id, bm.company_name, bm.daily_revenue, bm.interest_payable, bm.net_profit FROM BorrowerMetrics bm ORDER BY bm.loan_id;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE l.loan_id IN ( SELECT loan_id FROM public.loans WHERE loan_amount > 4000000000 ) GROUP BY l.loan_id ORDER BY total_actual_payment DESC;"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(scheduled_principal + scheduled_interest) AS total_scheduled_amount FROM expected_payment GROUP BY loan_id ORDER BY total_scheduled_amount DESC;"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, b.borrower_id, mc.contract_id, ap.loan_id_schedule, ap.actual_payment_date, ap.actual_principal + ap.actual_interest + ap.actual_other_fees + ap.actual_interest_vat AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id INNER JOIN public.master_contracts mc ON l.loan_id = mc.loan_id ORDER BY ap.actual_payment_date;"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id ORDER BY total_actual_payment DESC;"}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country, mc.contract_id, mc.contract_date, mc.total_receivable_include_vat FROM loans l JOIN borrower b ON l.borrower_id = b.borrower_id JOIN master_contracts mc ON l.loan_id = mc.loan_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat, ep.scheduled_principal, ep.scheduled_interest, ep.scheduled_tax FROM actual_payment ap JOIN expected_payment ep ON ap.loan_id = ep.loan_id AND ap.schedule_number = ep.schedule_number ), DeliveryDetails AS ( SELECT bd.loan_id, bd.introduction_id, bd.first_month_evs, bd.first_month_days, bd.first_month_total_usage, bd.first_month_receivable FROM bike_deliveries_first bd ) SELECT ld.loan_id, ld.borrower_id, ld.company_name, ld.loan_amount, pd.schedule_number, pd.actual_payment_date, pd.actual_principal, pd.actual_interest, dd.first_month_evs, dd.first_month_receivable, ld.total_receivable_include_vat FROM LoanDetails ld JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id JOIN DeliveryDetails dd ON ld.loan_id = dd.loan_id ORDER BY ld.loan_id, pd.schedule_number;"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(scheduled_principal) AS total_scheduled_principal, SUM(scheduled_interest) AS total_scheduled_interest FROM expected_payment GROUP BY loan_id ORDER BY total_scheduled_principal DESC;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_payment DESC;"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE l.loan_id IN ( SELECT loan_id FROM public.loans WHERE loan_amount > 1000000000 ) GROUP BY l.loan_id ORDER BY total_actual_payment DESC;"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(actual_principal) AS total_actual_principal FROM actual_payment GROUP BY loan_id ORDER BY total_actual_principal DESC;"}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total receivable amount including VAT for each contract contract_receivable AS ( SELECT mc.contract_id, mc.loan_id, mc.total_receivable_include_vat, mc.term, mc.daily_fee_include_vat, mc.number_of_evs FROM public.master_contracts mc ), -- Calculate total loan payables for each loan loan_payables AS ( SELECT ml.loan_id, ml.total_loan_payables, ml.interest_from_bank, ml.loan_tenure FROM public.master_loans ml ), -- Calculate actual payment and scheduled payment for each loan payment_info AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ep.scheduled_installment_date, ep.scheduled_principal, ep.scheduled_interest FROM public.actual_payment ap INNER JOIN public.expected_payment ep ON ap.loan_id = ep.loan_id AND ap.schedule_number = ep.schedule_number ) -- Combine contract, loan, and payment information SELECT cr.contract_id, cr.loan_id, lp.total_loan_payables, SUM(pi.actual_principal + pi.actual_interest) OVER (PARTITION BY pi.loan_id) AS total_actual_payment FROM contract_receivable cr INNER JOIN loan_payables lp ON cr.loan_id = lp.loan_id INNER JOIN payment_info pi ON cr.loan_id = pi.loan_id ORDER BY cr.loan_id, cr.contract_id;"}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total receivable and total VAT for each contract ContractFinancials AS ( SELECT mc.contract_id, mc.loan_id, mc.total_receivable_include_vat, mc.total_vat, mc.term, mc.daily_fee_include_vat, mc.number_of_evs FROM public.master_contracts mc ), -- Calculate total loan payables and interest from bank for each loan LoanFinancials AS ( SELECT ml.loan_id, ml.bank_loan_code, ml.total_loan_payables, ml.interest_from_bank, ml.agreement_date, ml.disbursement_date FROM public.master_loans ml ), -- Combine contract and loan financials CombinedFinancials AS ( SELECT cf.contract_id, cf.loan_id, cf.total_receivable_include_vat, cf.total_vat, lf.total_loan_payables, lf.interest_from_bank FROM ContractFinancials cf INNER JOIN LoanFinancials lf ON cf.loan_id = lf.loan_id ), -- Calculate key performance indicators (KPIs) for each loan LoanKPIs AS ( SELECT cf.loan_id, cf.total_receivable_include_vat, cf.total_vat, SUM(lf.total_loan_payables) OVER (PARTITION BY cf.loan_id) AS total_loan_payables, AVG(lf.interest_from_bank) OVER (PARTITION BY cf.loan_id) AS average_interest_rate FROM CombinedFinancials cf INNER JOIN LoanFinancials lf ON cf.loan_id = lf.loan_id ) -- Select relevant columns for analysis SELECT cf.loan_id, cf.contract_id, cf.total_receivable_include_vat, cf.total_vat FROM LoanKPIs cf ORDER BY cf.loan_id;"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE l.loan_type = 'Amortizing' AND ap.actual_payment_date IS NOT NULL GROUP BY l.loan_id ORDER BY total_actual_payment DESC;"}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total loan amount and total interest for each loan loan_amounts AS ( SELECT l.loan_id, l.loan_amount, ml.interest_from_bank, ml.loan_tenure FROM loans l JOIN master_loans ml ON l.loan_id = ml.loan_id ), -- Calculate total repayment amount for each loan repayment_amounts AS ( SELECT lp.loan_id, SUM(lp.actual_principal + lp.actual_interest) AS total_repayment FROM loan_payment lp GROUP BY lp.loan_id ), -- Calculate loan performance metrics loan_performance AS ( SELECT la.loan_id, la.loan_amount, la.interest_from_bank, la.loan_tenure, ra.total_repayment, (ra.total_repayment / (la.loan_amount * la.loan_tenure)) * 100 AS repayment_rate FROM loan_amounts la JOIN repayment_amounts ra ON la.loan_id = ra.loan_id ), -- Get borrower information borrower_info AS ( SELECT l.loan_id, b.borrower_id, b.company_name, b.country FROM loans l JOIN borrower b ON l.borrower_id = b.borrower_id ) -- Select required columns SELECT lp.loan_id, bi.borrower_id, bi.company_name, lp.repayment_rate FROM loan_performance lp JOIN borrower_info bi ON lp.loan_id = bi.loan_id ORDER BY lp.loan_id, bi.borrower_id;"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id ORDER BY total_actual_payment DESC;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.borrower_id, SUM(ap.actual_principal) AS total_principal_paid, SUM(ap.actual_interest) AS total_interest_paid FROM loans l JOIN borrower b ON l.borrower_id = b.borrower_id JOIN actual_payment ap ON l.loan_id = ap.loan_id WHERE ap.actual_payment_date IS NOT NULL GROUP BY l.loan_id, b.borrower_id ORDER BY total_principal_paid DESC;"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(scheduled_principal) AS total_scheduled_principal, SUM(scheduled_interest) AS total_scheduled_interest, SUM(scheduled_tax) AS total_scheduled_tax FROM expected_payment GROUP BY loan_id ORDER BY loan_id;"}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country, b.\"state/province/city\" FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ), CollateralDetails AS ( SELECT c.loan_id, c.collateral_id, c.appraisal_price, cd.motorcycle_id, cd.oem_brand, cd.model_name FROM public.collateral c INNER JOIN public.collateral_detailed cd ON c.loan_id = cd.loan_id ) SELECT ld.loan_id, ld.borrower_id, pd.schedule_number, cd.collateral_id FROM LoanDetails ld INNER JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id INNER JOIN CollateralDetails cd ON ld.loan_id = cd.loan_id GROUP BY ld.loan_id, ld.borrower_id, pd.schedule_number, cd.collateral_id ORDER BY ld.loan_id, pd.schedule_number;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.borrower_id, SUM(ap.actual_principal) AS total_principal_paid, SUM(ap.actual_interest) AS total_interest_paid FROM loans l JOIN borrower b ON l.borrower_id = b.borrower_id JOIN actual_payment ap ON l.loan_id = ap.loan_id WHERE ap.actual_payment_date IS NOT NULL GROUP BY l.loan_id, b.borrower_id ORDER BY total_principal_paid DESC;"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;"}
