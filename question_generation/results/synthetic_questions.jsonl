{"complexity": "Complex", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal) AS total_principal_paid, SUM(ap.actual_interest) AS total_interest_paid FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE l.loan_type = 'Amortizing' AND ap.actual_payment_date IS NOT NULL AND ap.actual_principal > 0 AND ap.actual_interest > 0 GROUP BY l.loan_id HAVING SUM(ap.actual_principal) > 100000000 AND SUM(ap.actual_interest) > 20000000 ORDER BY total_principal_paid DESC;", "style": "Colloquial", "question": "Hey! Could you help me find all the 'Amortizing' loans where the total principal paid is over 100 million and the total interest paid is over 20 million? I'd love to know the loan IDs, the total principal paid, and the total interest paid for each, and have them sorted by the total principal paid in descending order."}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, b.company_name, l.loan_amount, l.effective_interest_rate, l.term FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentSchedules AS ( SELECT ep.loan_id, ep.schedule_number, ep.scheduled_principal, ep.scheduled_interest, ep.scheduled_tax FROM public.expected_payment ep ), CollateralDetails AS ( SELECT c.loan_id, c.collateral_id, c.appraisal_price, cd.oem_brand, cd.model_name FROM public.collateral c INNER JOIN public.collateral_detailed cd ON c.loan_id = cd.loan_id ) SELECT ld.loan_id, ld.borrower_id, cd.collateral_id, ps.scheduled_principal FROM LoanDetails ld INNER JOIN PaymentSchedules ps ON ld.loan_id = ps.loan_id INNER JOIN CollateralDetails cd ON ld.loan_id = cd.loan_id ORDER BY ld.loan_id, ps.schedule_number;", "style": "Formal", "question": "Find the loan IDs, borrower IDs, collateral IDs, and scheduled principal amounts for all loans, including their borrower company names and collateral details, ordered by loan ID and schedule number."}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, mc.contract_id, ap.actual_payment_date, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.actual_payment ap INNER JOIN public.loans l ON ap.loan_id = l.loan_id INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.master_contracts mc ON l.loan_id = mc.loan_id GROUP BY l.loan_id, b.company_name, mc.contract_id, ap.actual_payment_date ORDER BY ap.actual_payment_date DESC;", "style": "Descriptive", "question": "I want to know the loan IDs, borrower names, contract IDs, actual payment dates, and total actual payments made for all loans, grouped by loan ID, borrower name, contract ID, and payment date, and listed in order of the most recent payment date."}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, b.company_name, l.loan_amount, l.effective_interest_rate, l.term FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentSchedules AS ( SELECT loan_id, schedule_number, scheduled_principal, scheduled_interest, scheduled_tax FROM public.expected_payment ), CollateralDetails AS ( SELECT c.loan_id, c.type, cd.oem_brand, cd.model_name FROM public.collateral c INNER JOIN public.collateral_detailed cd ON c.loan_id = cd.loan_id ) SELECT ld.loan_id, ld.company_name, ps.scheduled_principal, cd.type FROM LoanDetails ld INNER JOIN PaymentSchedules ps ON ld.loan_id = ps.loan_id INNER JOIN CollateralDetails cd ON ld.loan_id = cd.loan_id WHERE ld.loan_amount > 1000000 AND ps.scheduled_principal > 5000000 ORDER BY ld.loan_id, ps.scheduled_principal DESC;", "style": "Interrogative", "question": "Could you provide the loan IDs, company names, scheduled principal amounts, and collateral types for loans with an amount exceeding 1,000,000 and a scheduled principal payment over 5,000,000, ordered by loan ID and then by scheduled principal in descending order?"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Interrogative", "question": "Could you provide a list of loans, including their IDs and borrower names, along with the total actual payments made for each loan, ordered from the highest payment to the lowest?"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(actual_principal) AS total_actual_principal, SUM(actual_interest) AS total_actual_interest FROM actual_payment GROUP BY loan_id ORDER BY total_actual_principal DESC;", "style": "Imperative", "question": "Could you please provide a list of loan IDs along with the total actual principal and total actual interest paid for each loan, sorted by the total actual principal in descending order?"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Colloquial", "question": "Hey! Could you help me find a list of loans along with their borrowers and the total actual payments made on each loan? I'd love to know the loan IDs, borrower names, and the total amount paid, sorted by the total payment in descending order."}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Multi-turn Dialogue", "question": "[\n  {\"User\": \"I need to find the total actual payments made in 2024 for each loan.\"},\n  {\"Assistant\": \"What specific details do you want to know about these loans and their payments?\"},\n  {\"User\": \"I want to know the loan IDs, the names of the borrowers, and the total actual payments made.\"},\n  {\"Assistant\": \"Do you have any conditions for the payments, such as a specific year?\"},\n  {\"User\": \"Yes, I'm only interested in payments made in 2024.\"},\n  {\"Assistant\": \"How would you like the results sorted?\"},\n  {\"User\": \"I want the results sorted in descending order by the total actual payments.\"},\n  {\"Assistant\": \"Is there anything else you need?\"},\n  {\"User\": \"No.\"},\n  {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}\n]"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal) AS total_principal_paid, SUM(ap.actual_interest) AS total_interest_paid FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_principal_paid DESC, total_interest_paid DESC;", "style": "Colloquial", "question": "Hey! Could you help me find a list of loans, including their IDs, the names of the companies that borrowed them, the total principal paid, and the total interest paid? I'd love to get this information sorted by the total principal paid in descending order, and then by the total interest paid in descending order."}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total loan amount and total interest paid for each loan loan_amounts AS ( SELECT l.loan_id, l.loan_amount, COALESCE(SUM(lp.actual_principal), 0) AS total_principal_paid, COALESCE(SUM(lp.actual_interest), 0) AS total_interest_paid FROM loans l LEFT JOIN loan_payment lp ON l.loan_id = lp.loan_id GROUP BY l.loan_id, l.loan_amount ), -- Calculate total receivable amount for each contract contract_receivables AS ( SELECT mc.contract_id, mc.total_receivable_include_vat, mc.total_receivable_exclude_vat FROM master_contracts mc ), -- Combine loan and contract information loan_contract_info AS ( SELECT l.loan_id, mc.contract_id, l.loan_amount, mc.total_receivable_include_vat, mc.total_receivable_exclude_vat FROM loans l JOIN master_contracts mc ON l.loan_id = mc.loan_id ), -- Calculate profit for each loan loan_profits AS ( SELECT lci.loan_id, lci.contract_id, lci.loan_amount, lci.total_receivable_include_vat, lci.total_receivable_exclude_vat, la.total_principal_paid, la.total_interest_paid, (lci.total_receivable_include_vat - (la.total_principal_paid + la.total_interest_paid)) AS profit FROM loan_contract_info lci JOIN loan_amounts la ON lci.loan_id = la.loan_id ) SELECT lp.loan_id, lp.contract_id, lp.profit, lp.loan_amount FROM loan_profits lp ORDER BY lp.profit DESC;", "style": "Vague", "question": "What are the loan IDs, contract IDs, profits, and loan amounts for all loans ranked by their profit in descending order?"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id HAVING SUM(ap.actual_principal + ap.actual_interest) > 100000000 ORDER BY total_actual_payment DESC;", "style": "Formal", "question": "Find all loans with total actual payments (principal + interest) exceeding 100,000,000 in the year 2024, and return their loan IDs along with the total actual payments sorted in descending order."}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total receivable amount including VAT for each loan total_receivable AS ( SELECT mc.loan_id, mc.total_receivable_include_vat FROM master_contracts mc ), -- Calculate total loan amount total_loan_amount AS ( SELECT l.loan_id, l.loan_amount FROM loans l ), -- Calculate actual payment details actual_payment_details AS ( SELECT ap.loan_id, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM actual_payment ap ) -- Select required columns SELECT tr.loan_id, tr.total_receivable_include_vat, tla.loan_amount, apd.actual_payment_date, apd.actual_principal, apd.actual_interest, apd.actual_interest_vat FROM total_receivable tr INNER JOIN total_loan_amount tla ON tr.loan_id = tla.loan_id INNER JOIN actual_payment_details apd ON tr.loan_id = apd.loan_id WHERE tr.loan_id IN ('G-V-SM-2023001', 'G-V-SM-2024003', 'E-V-E-2024004') ORDER BY tr.loan_id;", "style": "Formal", "question": "Find the total receivable amount including VAT, total loan amount, actual payment date, actual principal, actual interest, and actual interest VAT for loans with IDs 'G-V-SM-2023001', 'G-V-SM-2024003', and 'E-V-E-2024004', and return the results ordered by loan ID."}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, mc.contract_id, ap.actual_payment_date, ap.actual_principal + ap.actual_interest AS total_payment, ap.actual_interest_vat FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id INNER JOIN public.master_contracts mc ON l.loan_id = mc.loan_id WHERE ap.actual_payment_date IS NOT NULL AND ap.actual_principal > 0 AND ap.actual_interest > 0 ORDER BY ap.actual_payment_date DESC;", "style": "Colloquial", "question": "Hey! Could you help me find all the recent loan payments where both the principal and interest are greater than zero? I'd love to know the loan IDs, borrower names, contract IDs, payment dates, total payments (principal + interest), and the VAT on the interest. Please list them in order of the most recent payments first."}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(scheduled_principal) AS total_scheduled_principal, SUM(scheduled_interest) AS total_scheduled_interest, SUM(scheduled_tax) AS total_scheduled_tax FROM expected_payment GROUP BY loan_id;", "style": "Interrogative", "question": "Could you provide a list of loan IDs along with their total scheduled principal, total scheduled interest, and total scheduled tax, based on the expected payment data?"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Interrogative", "question": "Could you provide a list of loans, including their IDs, borrower names, and total actual payments made, ordered from the highest total actual payment to the lowest?"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 AND ap.loan_id IN ( SELECT loan_id FROM public.loans WHERE loan_amount > 1000000000 ) GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Multi-turn Dialogue", "question": "[\n  {\"User\": \"I need to find information about loan payments made in 2024.\"},\n  {\"Assistant\": \"What specific details do you want to know about these loan payments?\"},\n  {\"User\": \"I want to know the loan IDs, borrower names, and total payments made.\"},\n  {\"Assistant\": \"Are you interested in payments made for all loans or just those with a loan amount over a certain threshold?\"},\n  {\"User\": \"Loans with an amount over 1 billion.\"},\n  {\"Assistant\": \"Do you need to know the total payment for each loan, including both principal and interest?\"},\n  {\"User\": \"Yes, the total of both.\"},\n  {\"Assistant\": \"How would you like the results organized?\"},\n  {\"User\": \"Grouped by loan ID and borrower name, and ordered by total payment in descending order.\"},\n  {\"Assistant\": \"Is there anything else you need?\"},\n  {\"User\": \"No.\"},\n  {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}\n]"}
{"complexity": "Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, b.company_name, l.loan_amount, l.effective_interest_rate, l.term FROM loans l JOIN borrower b ON l.borrower_id = b.borrower_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_principal, ap.actual_interest, ap.actual_payment_date FROM actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, ld.company_name, pd.schedule_number, pd.actual_payment_date FROM LoanDetails ld JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id WHERE pd.actual_payment_date IS NOT NULL AND ld.loan_amount > 1000000 ORDER BY pd.actual_payment_date DESC;", "style": "Formal", "question": "Find all loan details, including loan ID, borrower ID, company name, schedule number, and actual payment date, for loans with an amount greater than 1,000,000, where the payment date is not null, and return the results ordered by the payment date from most recent to oldest."}
{"complexity": "Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, b.company_name, l.loan_amount, l.effective_interest_rate, mc.total_receivable_include_vat FROM loans l JOIN borrower b ON l.borrower_id = b.borrower_id JOIN master_contracts mc ON l.loan_id = mc.loan_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM actual_payment ap ) SELECT ld.loan_id, ld.company_name, pd.actual_payment_date, (pd.actual_principal + pd.actual_interest + pd.actual_interest_vat) AS total_payment FROM LoanDetails ld JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id WHERE pd.actual_payment_date IS NOT NULL ORDER BY pd.actual_payment_date DESC;", "style": "Multi-turn Dialogue", "question": "[\n  {\"User\": \"I need to find information about loan payments made by companies.\"},\n  {\"Assistant\": \"What specific details do you want to know about these loan payments?\"},\n  {\"User\": \"I want to know the loan IDs, company names, and the total amount paid on each loan.\"},\n  {\"Assistant\": \"Do you want to filter these payments by any specific criteria, such as payment date?\"},\n  {\"User\": \"Yes, I only want payments that have been made, so include only payments with a valid payment date.\"},\n  {\"Assistant\": \"How would you like the results ordered? By payment date, perhaps?\"},\n  {\"User\": \"Yes, order them from most recent to oldest based on the payment date.\"},\n  {\"Assistant\": \"Is there anything else you need to know about these loan payments?\"},\n  {\"User\": \"No, that's all.\"},\n  {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}\n]"}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total receivable amount for each loan LoanReceivables AS ( SELECT mc.loan_id, mc.total_receivable_include_vat, mc.term, mc.daily_fee_include_vat, mc.number_of_evs FROM master_contracts mc ), -- Calculate total loan payables for each loan LoanPayables AS ( SELECT ml.loan_id, ml.total_loan_payables, ml.loan_tenure FROM master_loans ml ), -- Combine loan receivables and payables LoanFinancials AS ( SELECT lr.loan_id, lr.total_receivable_include_vat, lr.term, lp.total_loan_payables, lp.loan_tenure FROM LoanReceivables lr INNER JOIN LoanPayables lp ON lr.loan_id = lp.loan_id ), -- Calculate key financial metrics for each loan LoanMetrics AS ( SELECT lf.loan_id, lf.total_receivable_include_vat, lf.term, lf.total_loan_payables, lf.loan_tenure, (lf.total_receivable_include_vat / lf.term) AS monthly_receivable, (lf.total_loan_payables / lf.loan_tenure) AS monthly_payable FROM LoanFinancials lf ) -- Select required columns SELECT lm.loan_id, lm.total_receivable_include_vat, lm.monthly_receivable, lm.monthly_payable FROM LoanMetrics lm ORDER BY lm.loan_id;", "style": "Interrogative", "question": "Could you provide a list of loan IDs along with their total receivable amounts, monthly receivable amounts, and monthly payable amounts, ordered by loan ID?"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Multi-turn Dialogue", "question": "[\n  {\"User\": \"I need to find information about loans and their total payments.\"},\n  {\"Assistant\": \"What specific details do you want to know about these loans?\"},\n  {\"User\": \"I want to know the loan IDs, the names of the borrowers, and the total amount paid for each loan.\"},\n  {\"Assistant\": \"Do you want to see the details of all loans or just some specific ones?\"},\n  {\"User\": \"All loans, and I want them ordered by the total amount paid in descending order.\"},\n  {\"Assistant\": \"Is there anything else you need to know about these loans?\"},\n  {\"User\": \"No, that's all.\"},\n  {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}\n]"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE l.loan_type = 'Amortizing' AND b.country = 'INDONESIA' AND ap.actual_payment_date IS NOT NULL GROUP BY l.loan_id, b.company_name HAVING SUM(ap.actual_principal + ap.actual_interest) > 100000000 ORDER BY total_actual_payment DESC;", "style": "Vague", "question": "What are the loan IDs, borrower names, and total actual payments for amortizing loans from Indonesian borrowers where the total payment exceeds 100 million, ordered by the total payment in descending order?"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(actual_principal) FROM actual_payment WHERE actual_payment_date > '2024-01-01' GROUP BY loan_id ORDER BY SUM(actual_principal) DESC;", "style": "Interrogative", "question": "Could you tell me which loans have the highest total actual principal payments made after January 1, 2024, and what are these total amounts?"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE ap.actual_payment_date IS NOT NULL GROUP BY l.loan_id HAVING SUM(ap.actual_principal + ap.actual_interest) > 1000000", "style": "Metaphorical", "question": "Which loans have surpassed the million-dollar mark in total payments, combining principal and interest?"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id HAVING SUM(ap.actual_principal + ap.actual_interest) > 100000000 ORDER BY total_actual_payment DESC;", "style": "Descriptive", "question": "I want to know the loan IDs and the total actual payments (the sum of actual principal and actual interest) for all loans in 2024 where the total actual payment exceeds 100,000,000, listed in order from the highest total actual payment to the lowest."}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, b.company_name, l.loan_amount, l.effective_interest_rate, l.term FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentSchedules AS ( SELECT loan_id, schedule_number, scheduled_principal, scheduled_interest, scheduled_tax FROM public.expected_payment ), CollateralDetails AS ( SELECT c.loan_id, c.type, cd.motorcycle_id, cd.oem_brand, cd.model_name FROM public.collateral c INNER JOIN public.collateral_detailed cd ON c.loan_id = cd.loan_id ) SELECT ld.loan_id, ld.borrower_id, ps.scheduled_principal, cd.type FROM LoanDetails ld INNER JOIN PaymentSchedules ps ON ld.loan_id = ps.loan_id INNER JOIN CollateralDetails cd ON ld.loan_id = cd.loan_id WHERE ld.loan_amount > 1000000 ORDER BY ld.loan_id, ps.schedule_number;", "style": "Formal", "question": "Find all loans with an amount greater than 1,000,000, including their loan IDs, borrower IDs, scheduled principal amounts from the payment schedules, and the types of collateral associated with these loans. Return the results sorted by loan ID and schedule number."}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(scheduled_principal) AS total_scheduled_principal FROM expected_payment GROUP BY loan_id ORDER BY total_scheduled_principal DESC;", "style": "Imperative", "question": "Could you please provide a list of loans along with their total scheduled principal amounts, sorted from the highest to the lowest total scheduled principal?"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Vague", "question": "What are the loan IDs, borrower names, and total amounts paid for all loans, sorted by the total amount paid from highest to lowest?"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal) AS total_principal_paid, SUM(ap.actual_interest) AS total_interest_paid FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE ap.actual_payment_date IS NOT NULL GROUP BY l.loan_id HAVING SUM(ap.actual_principal) > 100000000 AND SUM(ap.actual_interest) > 20000000 ORDER BY total_principal_paid DESC;", "style": "Concise", "question": "Find loans with total principal payments over 100,000,000 and total interest payments over 20,000,000, list them by the highest total principal paid."}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(actual_principal + actual_interest) AS total_actual_payment FROM actual_payment GROUP BY loan_id ORDER BY total_actual_payment DESC;", "style": "Descriptive", "question": "I want to know the loan IDs and their corresponding total actual payments, which include the sum of the actual principal and actual interest paid, sorted by the total actual payment in descending order."}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total receivable amount including VAT for each loan total_receivable AS ( SELECT mc.loan_id, mc.total_receivable_include_vat, mc.term, mc.daily_fee_include_vat, mc.number_of_evs FROM master_contracts mc ), -- Calculate total loan payables for each loan loan_payables AS ( SELECT ml.loan_id, ml.total_loan_payables, ml.loan_tenure FROM master_loans ml ), -- Combine total receivable and loan payables combined AS ( SELECT tr.loan_id, tr.total_receivable_include_vat, tr.term, tr.daily_fee_include_vat, tr.number_of_evs, lp.total_loan_payables, lp.loan_tenure FROM total_receivable tr INNER JOIN loan_payables lp ON tr.loan_id = lp.loan_id ), -- Calculate daily fee and total principal daily_fee_principal AS ( SELECT c.loan_id, c.daily_fee_include_vat, mc.total_principal FROM combined c INNER JOIN master_contracts mc ON c.loan_id = mc.loan_id ) -- Select required columns SELECT dfp.loan_id, dfp.daily_fee_include_vat AS daily_fee, dfp.total_principal, lr.total_loan_payables, mc.term FROM daily_fee_principal dfp INNER JOIN loan_payables lr ON dfp.loan_id = lr.loan_id INNER JOIN master_contracts mc ON dfp.loan_id = mc.loan_id ORDER BY dfp.loan_id;", "style": "Imperative", "question": "Could you please provide a detailed list of loans, including their daily fees, total principals, total loan payables, and terms? I need to know the loan ID, daily fee, total principal, total loan payables, and term for each loan, sorted by the loan ID."}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total receivable amount including VAT for each contract contract_receivable AS ( SELECT mc.contract_id, mc.loan_id, mc.total_receivable_include_vat, mc.term, mc.daily_fee_include_vat, mc.number_of_evs FROM public.master_contracts mc ), -- Calculate total loan payables for each loan loan_payables AS ( SELECT ml.loan_id, ml.total_loan_payables, ml.interest_from_bank FROM public.master_loans ml ), -- Calculate actual payment and scheduled payment for each loan payment_info AS ( SELECT ap.loan_id, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ep.scheduled_installment_date, ep.scheduled_principal, ep.scheduled_interest FROM public.actual_payment ap JOIN public.expected_payment ep ON ap.loan_id = ep.loan_id AND ap.schedule_number = ep.schedule_number ), -- Combine loan information with payment information loan_payment_info AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, lpii.actual_payment_date, lpii.actual_principal, lpii.actual_interest, lpii.scheduled_installment_date, lpii.scheduled_principal, lpii.scheduled_interest FROM public.loans l JOIN payment_info lpii ON l.loan_id = lpii.loan_id ), -- Combine contract information with loan payment information contract_payment_info AS ( SELECT cri.contract_id, cri.loan_id, cri.total_receivable_include_vat, lpi.borrower_id, lpi.loan_amount, lpi.effective_interest_rate, lpi.actual_payment_date, lpi.actual_principal, lpi.actual_interest, lpi.scheduled_installment_date, lpi.scheduled_principal, lpi.scheduled_interest FROM contract_receivable cri JOIN loan_payment_info lpi ON cri.loan_id = lpi.loan_id ) -- Select required columns SELECT cpi.contract_id, cpi.borrower_id, cpi.actual_payment_date, cpi.total_receivable_include_vat FROM contract_payment_info cpi ORDER BY cpi.contract_id, cpi.borrower_id;", "style": "Interrogative", "question": "Could you provide a list of contracts, including their IDs, borrower IDs, actual payment dates, and total receivable amounts including VAT, ordered by contract ID and borrower ID?"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.actual_payment ap INNER JOIN public.loans l ON ap.loan_id = l.loan_id INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id GROUP BY l.loan_id, b.company_name HAVING SUM(ap.actual_principal + ap.actual_interest) > 100000000 ORDER BY total_actual_payment DESC;", "style": "Concise", "question": "Find the loan IDs, borrower names, and total actual payments for loans with total payments exceeding 100,000,000, ordered by the highest total payments.\n\nAlternatively, in a more concise style:\nList loan IDs, borrower names, and total actual payments for loans with payments over 100,000,000, in descending order of total payments."}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total receivable and total VAT for each contract ContractFinancials AS ( SELECT mc.contract_id, mc.loan_id, mc.total_receivable_include_vat, mc.total_vat, mc.term, mc.daily_fee_include_vat, mc.number_of_evs FROM public.master_contracts mc ), -- Calculate total loan payables and interest from bank for each loan LoanFinancials AS ( SELECT ml.loan_id, ml.total_loan_payables, ml.interest_from_bank, ml.loan_tenure FROM public.master_loans ml ), -- Combine contract and loan financials CombinedFinancials AS ( SELECT cf.contract_id, cf.loan_id, cf.total_receivable_include_vat, cf.total_vat, cf.term, lf.total_loan_payables, lf.interest_from_bank, lf.loan_tenure FROM ContractFinancials cf INNER JOIN LoanFinancials lf ON cf.loan_id = lf.loan_id ), -- Calculate key performance indicators (KPIs) for each loan LoanKPIs AS ( SELECT cf.loan_id, cf.total_receivable_include_vat, cf.total_vat, (cf.total_receivable_include_vat / cf.term) AS monthly_receivable, lf.total_loan_payables, lf.interest_from_bank * lf.loan_tenure AS total_interest FROM CombinedFinancials cf INNER JOIN LoanFinancials lf ON cf.loan_id = lf.loan_id ) -- Select relevant columns for analysis SELECT lk.loan_id, lk.total_receivable_include_vat, lk.total_vat, lk.monthly_receivable FROM LoanKPIs lk ORDER BY lk.loan_id;", "style": "Colloquial", "question": "Hey! Could you help me find the loan IDs, total receivable amounts including VAT, total VAT amounts, and monthly receivable amounts for all loans? I'd love to know these details ordered by loan ID."}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE ap.actual_payment_date IS NOT NULL GROUP BY l.loan_id HAVING SUM(ap.actual_principal + ap.actual_interest) > 1000000 ORDER BY total_actual_payment DESC;", "style": "Colloquial", "question": "Hey! Could you help me find all the loans that have a total actual payment (principal + interest) of more than 1,000,000? I'd love to know the loan IDs and the total actual payments for these loans, listed in order from the highest payment to the lowest."}
{"complexity": "Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, b.company_name, l.loan_amount, l.effective_interest_rate, mc.total_receivable_include_vat FROM loans l JOIN borrower b ON l.borrower_id = b.borrower_id JOIN master_contracts mc ON l.loan_id = mc.loan_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM actual_payment ap ) SELECT ld.loan_id, ld.company_name, ld.loan_amount, ld.effective_interest_rate, pd.actual_payment_date, pd.actual_principal + pd.actual_interest + pd.actual_interest_vat AS total_payment FROM LoanDetails ld JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id WHERE pd.actual_payment_date IS NOT NULL ORDER BY pd.actual_payment_date DESC;", "style": "Vague", "question": "What are the loan details and total payments made for all loans that have been paid, listed in order of the most recent payment date?"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(actual_principal) AS total_actual_principal, SUM(actual_interest) AS total_actual_interest FROM actual_payment GROUP BY loan_id ORDER BY total_actual_principal DESC;", "style": "Colloquial", "question": "Hey! Could you help me find the total actual principal and interest paid for each loan? I'd love to know the loan IDs, the total actual principal paid, and the total actual interest paid, sorted by the total actual principal in descending order."}
{"complexity": "Highly Complex", "sql_query": "WITH -- Calculate total actual payments for each loan TotalActualPayments AS ( SELECT ap.loan_id, SUM(ap.actual_principal + ap.actual_interest + ap.actual_other_fees) AS total_actual_payment FROM actual_payment ap GROUP BY ap.loan_id ), -- Calculate total scheduled payments for each loan TotalScheduledPayments AS ( SELECT ep.loan_id, SUM(ep.scheduled_principal + ep.scheduled_interest + ep.scheduled_other_fees) AS total_scheduled_payment FROM expected_payment ep GROUP BY ep.loan_id ), -- Calculate loan details LoanDetails AS ( SELECT l.loan_id, l.loan_amount, l.effective_interest_rate, mc.term, mc.daily_fee_include_vat, mc.number_of_evs FROM loans l JOIN master_contracts mc ON l.loan_id = mc.loan_id ), -- Combine loan details with total payments CombinedPayments AS ( SELECT tap.loan_id, tap.total_actual_payment, tsp.total_scheduled_payment, ld.loan_amount, ld.effective_interest_rate, ld.term, ld.daily_fee_include_vat, ld.number_of_evs FROM TotalActualPayments tap JOIN TotalScheduledPayments tsp ON tap.loan_id = tsp.loan_id JOIN LoanDetails ld ON tap.loan_id = ld.loan_id ) -- Select required columns SELECT loan_id, total_actual_payment, total_scheduled_payment, loan_amount FROM CombinedPayments ORDER BY loan_id;", "style": "Concise", "question": "Return the loan IDs, their total actual payments, total scheduled payments, and loan amounts, ordered by loan ID."}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Concise", "question": "Find the loan IDs, borrower names, and total actual payments (principal + interest) for all loans, ordered by the total actual payment in descending order."}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Descriptive", "question": "I want to know the loan IDs, borrower names, and total actual payments made for all loans, ordered by the total actual payments in descending order, so I can see which loans have the highest total payments."}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, mc.contract_id, SUM(ap.actual_principal + ap.actual_interest) AS total_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.master_contracts mc ON l.loan_id = mc.loan_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name, mc.contract_id ORDER BY total_payment DESC LIMIT 10;", "style": "Formal", "question": "Find the top 10 loans with the highest total payments, including their loan IDs, borrower names, contract IDs, and total amounts paid, and return them ordered by the total payment in descending order."}
