{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Colloquial", "question": "Hey! Could you help me find the loan IDs, company names, and total actual payments (actual principal + actual interest) for all loans? I'd love to know this information sorted by the total actual payment in descending order, so I can see which loans have the highest total payments first."}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ), CollateralDetails AS ( SELECT c.loan_id, c.collateral_id, c.type, c.appraisal_price FROM public.collateral c ) SELECT ld.loan_id, ld.borrower_id, SUM(pd.actual_principal) AS total_principal_paid, COUNT(DISTINCT ccd.collateral_id) AS number_of_collaterals FROM LoanDetails ld INNER JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id INNER JOIN CollateralDetails ccd ON ld.loan_id = ccd.loan_id GROUP BY ld.loan_id, ld.borrower_id ORDER BY ld.loan_id;", "style": "Formal", "question": "Find the loan IDs and borrower IDs for all loans, along with the total principal paid and the number of collaterals associated with each loan, ordered by loan ID."}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id ORDER BY total_actual_payment DESC;", "style": "Descriptive", "question": "I want to know the loan IDs and the total actual payments made in 2024 for all loans, sorted by the total actual payment amount in descending order."}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country, b.\"state/province/city\" FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ), CollateralDetails AS ( SELECT c.loan_id, c.type, c.appraisal_price, cd.motorcycle_id, cd.oem_brand, cd.model_name FROM public.collateral c INNER JOIN public.collateral_detailed cd ON c.loan_id = cd.loan_id ) SELECT ld.loan_id, ld.borrower_id, ld.company_name, pd.schedule_number, cd.type AS collateral_type, cd.appraisal_price, pd.actual_payment_date, pd.actual_principal, COALESCE(pd.actual_interest_vat, 0) AS actual_interest_vat FROM LoanDetails ld INNER JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id INNER JOIN CollateralDetails cd ON ld.loan_id = cd.loan_id ORDER BY ld.loan_id, pd.schedule_number;", "style": "Interrogative", "question": "Could you provide a detailed report of all loans, including the loan ID, borrower ID, company name, payment schedule numbers, collateral types, appraisal prices, actual payment dates, actual principal amounts, and actual interest VAT amounts, ordered by loan ID and payment schedule number?"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Interrogative", "question": "Could you tell me which loans have the highest total actual payments, including the borrower company names, and list them in order from highest to lowest total actual payment?"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, schedule_number, actual_payment_date, actual_principal, actual_interest, COALESCE(actual_other_fees, 0) AS actual_other_fees, actual_interest_vat, COALESCE(\"late_fee_&_other_charges\", 0) AS \"late_fee_&_other_charges\", COALESCE(discount_given_principal, 0) AS discount_given_principal, COALESCE(discount_given_interests, 0) AS discount_given_interests, COALESCE(discount_given_vat, 0) AS discount_given_vat, COALESCE(refinanced_amount, 0) AS refinanced_amount, COALESCE(recoverd_concept, '') AS recoverd_concept, COALESCE(recovered_principal, 0) AS recovered_principal, COALESCE(recovered_non_principal, 0) AS recovered_non_principal FROM actual_payment WHERE actual_payment_date IS NOT NULL AND actual_principal > 0 AND actual_interest > 0 ORDER BY actual_payment_date DESC LIMIT 1;", "style": "Imperative", "question": "Could you please provide the details of the most recent actual payment record where both the principal and interest are greater than 0, including the loan ID, schedule number, actual payment date, actual principal, actual interest, actual other fees, actual interest VAT, late fees and other charges, discounts given on principal, interests, and VAT, refinanced amount, recovered concept, recovered principal, and recovered non-principal?"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.borrower_id, mc.contract_id, ap.loan_id_schedule, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.actual_payment ap INNER JOIN public.loans l ON ap.loan_id = l.loan_id INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.master_contracts mc ON l.loan_id = mc.loan_id GROUP BY l.loan_id, b.borrower_id, mc.contract_id, ap.loan_id_schedule ORDER BY total_actual_payment DESC;", "style": "Colloquial", "question": "Hey! Could you help me find the loan details along with the total actual payments made for each loan? I'd love to know the loan IDs, borrower IDs, contract IDs, schedule IDs, and the total actual payments (including both principal and interest) for each loan. It would be great if the results could be sorted by the total actual payment in descending order, so I can see which loans have the highest payments first."}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Multi-turn Dialogue", "question": "[\n  {\"User\": \"I need to find information about loans and their total actual payments.\"},\n  {\"Assistant\": \"What specific details do you want to know about these loans?\"},\n  {\"User\": \"I want to know the loan IDs, the company names of the borrowers, and the total actual payments made.\"},\n  {\"Assistant\": \"Do you need the total actual payments to be calculated in a specific way, such as adding principal and interest?\"},\n  {\"User\": \"Yes, I need the total actual payment to be the sum of the actual principal and actual interest.\"},\n  {\"Assistant\": \"How do you want the results to be organized?\"},\n  {\"User\": \"I want the results grouped by loan ID and company name.\"},\n  {\"Assistant\": \"And do you want the results sorted in any particular order?\"},\n  {\"User\": \"Yes, sort them by the total actual payment in descending order.\"},\n  {\"Assistant\": \"Is there anything else you need?\"},\n  {\"User\": \"No.\"},\n  {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}\n]"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Colloquial", "question": "Hey! Could you help me find the loan IDs, company names, and total actual payments for all loans? I'd love to know which loans have the highest total actual payments, including the loan IDs, the names of the companies that borrowed them, and the total amount paid."}
{"complexity": "Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, b.company_name, b.country FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, ld.company_name, SUM(pd.actual_principal + pd.actual_interest + pd.actual_interest_vat) AS total_payment FROM LoanDetails ld INNER JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id GROUP BY ld.loan_id, ld.borrower_id, ld.company_name ORDER BY total_payment DESC;", "style": "Vague", "question": "What are the loan details and total payments made for each loan, listed in order of the highest total payment to the lowest?"}
{"complexity": "Highly Complex", "sql_query": "WITH loan_info AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit FROM public.loans l ), borrower_info AS ( SELECT b.borrower_id, b.company_name, b.country, b.\"state/province/city\" FROM public.borrower b ), payment_info AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ), first_delivery_info AS ( SELECT bdf.loan_id, bdf.introduction_id, bdf.first_month_evs, bdf.first_month_days, bdf.first_month_total_usage FROM public.bike_deliveries_first bdf ) SELECT li.loan_id, bi.company_name, pi.actual_payment_date, fdi.first_month_evs FROM loan_info li INNER JOIN borrower_info bi ON li.borrower_id = bi.borrower_id INNER JOIN payment_info pi ON li.loan_id = pi.loan_id INNER JOIN first_delivery_info fdi ON li.loan_id = fdi.loan_id GROUP BY li.loan_id, bi.company_name, pi.actual_payment_date, fdi.first_month_evs ORDER BY li.loan_id, bi.company_name, pi.actual_payment_date, fdi.first_month_evs;", "style": "Formal", "question": "Find the loan IDs, company names of borrowers, actual payment dates, and first-month EVS for bike deliveries, and return them grouped and ordered by loan ID, company name, actual payment date, and first-month EVS."}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Formal", "question": "Find all loans with their respective company names and calculate the total actual payments made for each loan by summing the actual principal and actual interest, then return the results ordered by the total actual payment in descending order."}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id ORDER BY total_actual_payment DESC;", "style": "Colloquial", "question": "Hey! Could you help me find the total actual payments made for each loan in 2024? I'd love to know the loan IDs and the total amount paid, sorted by the highest total payment first."}
{"complexity": "Simple", "sql_query": "SELECT loan_id, schedule_number, actual_payment_date, actual_principal, actual_interest, actual_interest_vat, COALESCE(\"late_fee_&_other_charges\", 0) AS \"late_fee_&_other_charges\" FROM actual_payment WHERE actual_payment_date IS NOT NULL AND actual_principal > 0 AND actual_interest > 0 AND \"late_fee_&_other_charges\" IS NOT NULL ORDER BY actual_payment_date DESC LIMIT 1;", "style": "Interrogative", "question": "Could you tell me what the most recent actual payment details are, including the loan ID, schedule number, actual payment date, actual principal, actual interest, actual interest VAT, and late fees & other charges, for payments where the principal and interest paid are greater than 0 and there are late fees or other charges?"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE l.loan_type = 'Amortizing' AND ap.actual_payment_date IS NOT NULL GROUP BY l.loan_id ORDER BY total_actual_payment DESC;", "style": "Interrogative", "question": "Could you tell me which loans are of type 'Amortizing', have a recorded payment date, and what their total actual payments are, listed in order from the highest total payment to the lowest?"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, b.borrower_id, lp.schedule_no, lp.payment_schedule, lp.principal, lp.interest FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.loan_payment lp ON l.loan_id = lp.loan_id WHERE l.loan_id IN ( SELECT loan_id FROM public.loan_payment GROUP BY loan_id HAVING COUNT(loan_id) > 10 ) AND lp.payment_schedule > '2024-01-01' ORDER BY l.loan_id, lp.schedule_no;", "style": "Multi-turn Dialogue", "question": "[\n  {\"User\": \"I need to find loan information with multiple payments.\"},\n  {\"Assistant\": \"What specific loan information would you like to know?\"},\n  {\"User\": \"Details about loans with more than 10 payments.\"},\n  {\"Assistant\": \"Would you like to know the loan IDs, borrower IDs, schedule numbers, payment dates, principal amounts, and interest amounts for these loans?\"},\n  {\"User\": \"Yes, and I need the payment details for payments made after January 1, 2024.\"},\n  {\"Assistant\": \"How would you like the results organized?\"},\n  {\"User\": \"Organized by loan ID and then by schedule number.\"},\n  {\"Assistant\": \"Is there anything else you need?\"},\n  {\"User\": \"No.\"},\n  {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}\n]"}
{"complexity": "Highly Complex", "sql_query": "WITH contract_receivable AS ( SELECT mc.contract_id, mc.loan_id, mc.total_receivable_include_vat, mc.term, mc.daily_fee_include_vat, mc.number_of_evs FROM public.master_contracts mc ), loan_payables AS ( SELECT ml.loan_id, ml.total_loan_payables, ml.interest_from_bank, ml.loan_tenure FROM public.master_loans ml ), combined_info AS ( SELECT cr.contract_id, cr.loan_id, cr.total_receivable_include_vat, cr.term, cr.daily_fee_include_vat, cr.number_of_evs, lp.total_loan_payables, lp.interest_from_bank, lp.loan_tenure FROM contract_receivable cr INNER JOIN loan_payables lp ON cr.loan_id = lp.loan_id ), kpis AS ( SELECT ci.contract_id, ci.loan_id, ci.total_receivable_include_vat, ci.term, ci.daily_fee_include_vat, ci.number_of_evs, ci.total_loan_payables, ci.interest_from_bank, ci.loan_tenure, CASE WHEN ci.total_loan_payables = 0 OR ci.total_receivable_include_vat IS NULL OR ci.total_loan_payables IS NULL THEN NULL ELSE ci.total_receivable_include_vat / ci.total_loan_payables END AS kpi_ratio FROM combined_info ci ) SELECT k.contract_id, k.loan_id, k.total_receivable_include_vat, k.total_loan_payables, k.kpi_ratio FROM kpis k WHERE k.kpi_ratio IS NOT NULL ORDER BY k.kpi_ratio DESC LIMIT 1;", "style": "Formal", "question": "Find the contract with the highest KPI ratio, which is calculated as the total receivable including VAT divided by the total loan payables, and return its contract ID, loan ID, total receivable including VAT, total loan payables, and KPI ratio."}
{"complexity": "Simple", "sql_query": "SELECT loan_id, schedule_number, actual_payment_date, actual_principal, actual_interest, actual_interest_vat, COALESCE(\"late_fee_&_other_charges\", 0) AS \"late_fee_&_other_charges\" FROM actual_payment WHERE actual_payment_date IS NOT NULL AND actual_principal > 0 AND actual_interest > 0 AND \"late_fee_&_other_charges\" IS NOT NULL ORDER BY actual_payment_date DESC LIMIT 1;", "style": "Multi-turn Dialogue", "question": "[\n  {\"User\": \"I need to find information about a specific actual payment.\"},\n  {\"Assistant\": \"What details do you want to know about this actual payment?\"},\n  {\"User\": \"I want to know the loan ID, schedule number, actual payment date, actual principal, actual interest, actual interest VAT, and late fees & other charges.\"},\n  {\"Assistant\": \"Do you have any specific conditions for the actual payment date?\"},\n  {\"User\": \"The actual payment date should not be null.\"},\n  {\"Assistant\": \"Are there any conditions for the actual principal and actual interest amounts?\"},\n  {\"User\": \"Both the actual principal and actual interest should be greater than 0.\"},\n  {\"Assistant\": \"Is there a condition for the late fees & other charges?\"},\n  {\"User\": \"Late fees & other charges should not be null.\"},\n  {\"Assistant\": \"How do you want the results sorted?\"},\n  {\"User\": \"Sort by actual payment date in descending order.\"},\n  {\"Assistant\": \"Do you want to limit the results to a specific number of rows?\"},\n  {\"User\": \"Just the most recent one.\"},\n  {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}\n]"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Interrogative", "question": "Could you provide a list of loans, including their IDs, the company names of the borrowers, and the total actual payments made on each loan, ordered from the highest total actual payment to the lowest?"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id ORDER BY total_actual_payment DESC;", "style": "Multi-turn Dialogue", "question": "[\n  {\"User\": \"I want to find out the total payments made for each loan in 2024.\"},\n  {\"Assistant\": \"What specific details do you want to know about these loan payments?\"},\n  {\"User\": \"I need the loan IDs and the total actual payments made in 2024.\"},\n  {\"Assistant\": \"Do you need any specific ordering or filtering of these results?\"},\n  {\"User\": \"I want the results sorted by the total actual payments in descending order.\"},\n  {\"Assistant\": \"Is there anything else you need?\"},\n  {\"User\": \"No.\"},\n  {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}\n]"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, schedule_number, actual_payment_date, actual_principal, actual_interest, actual_interest_vat FROM actual_payment WHERE actual_payment_date IS NOT NULL AND actual_principal > 0 AND actual_interest > 0 ORDER BY actual_payment_date DESC;", "style": "Vague", "question": "What are the loan IDs, schedule numbers, payment dates, principal amounts, interest amounts, and interest VATs for the recent payments where both the principal and interest paid are positive?"}
{"complexity": "Highly Complex", "sql_query": "WITH LoanSummary AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country, b.\"state/province/city\" FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentSummary AS ( SELECT ap.loan_id, SUM(ap.actual_principal) AS total_principal, SUM(ap.actual_interest) AS total_interest, SUM(ap.actual_other_fees) AS total_fees, SUM(ap.actual_interest_vat) AS total_vat FROM public.actual_payment ap GROUP BY ap.loan_id ), CollateralSummary AS ( SELECT c.loan_id, COUNT(c.collateral_id) AS collateral_count, SUM(c.appraisal_price) AS total_appraisal_price FROM public.collateral c GROUP BY c.loan_id ) SELECT ls.loan_id, ls.borrower_id, ls.loan_amount, ps.total_principal, cs.collateral_count FROM LoanSummary ls INNER JOIN PaymentSummary ps ON ls.loan_id = ps.loan_id INNER JOIN CollateralSummary cs ON ls.loan_id = cs.loan_id ORDER BY ls.loan_id;", "style": "Interrogative", "question": "Could you provide a detailed list of loans, including their IDs, borrower IDs, loan amounts, total principals paid, and collateral counts, ordered by loan ID?"}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, bc.contract_id, bc.total_receivable_include_vat, bc.total_receivable_exclude_vat, bc.total_principal, bc.total_vat FROM public.loans l INNER JOIN public.master_contracts bc ON l.loan_id = bc.loan_id ), PaymentSchedules AS ( SELECT ep.loan_id, ep.schedule_number, ep.scheduled_installment_date, ep.scheduled_principal, ep.scheduled_interest, ep.scheduled_tax FROM public.expected_payment ep ), ActualPayments AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, ps.schedule_number, COALESCE(ap.actual_payment_date, ps.scheduled_installment_date) AS payment_date, COALESCE(ap.actual_principal, ps.scheduled_principal) AS principal, COALESCE(ap.actual_interest, ps.scheduled_interest) AS interest, COALESCE(ap.actual_interest_vat, ps.scheduled_tax * 0.11) AS interest_vat, ld.total_receivable_include_vat FROM LoanDetails ld INNER JOIN PaymentSchedules ps ON ld.loan_id = ps.loan_id LEFT JOIN ActualPayments ap ON ld.loan_id = ap.loan_id AND ps.schedule_number = ap.schedule_number ORDER BY ld.loan_id, ps.schedule_number;", "style": "Metaphorical", "question": "What are the loan details, scheduled payment dates, and actual payment information for all loans, including the principal, interest, and interest VAT, sorted by loan ID and schedule number?"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE ap.actual_payment_date IS NOT NULL GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Descriptive", "question": "I want to know the loan IDs, company names of borrowers, and the total actual payments made for each loan, but only for loans that have at least one actual payment recorded. Can you provide this information, sorted by the total actual payment in descending order?"}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, m.contract_date, m.total_receivable_include_vat, m.total_receivable_exclude_vat, m.total_vat FROM public.loans l INNER JOIN public.master_contracts m ON l.loan_id = m.loan_id ), PaymentSchedules AS ( SELECT ep.loan_id, ep.schedule_number, ep.scheduled_principal, ep.scheduled_interest, ep.scheduled_tax FROM public.expected_payment ep ), ActualPayments AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, SUM(ps.scheduled_principal) AS total_scheduled_principal, SUM(ap.actual_principal) AS total_actual_principal FROM LoanDetails ld INNER JOIN PaymentSchedules ps ON ld.loan_id = ps.loan_id INNER JOIN ActualPayments ap ON ld.loan_id = ap.loan_id AND ps.schedule_number = ap.schedule_number GROUP BY ld.loan_id, ld.borrower_id ORDER BY ld.loan_id;", "style": "Formal", "question": "Find all loan details including borrower IDs, and return the total scheduled principal and total actual principal payments for each loan and borrower, ordered by loan ID."}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id ORDER BY total_actual_payment DESC;", "style": "Imperative", "question": "Could you please provide a list of loan IDs along with their total actual payments (which is the sum of actual principal and actual interest), sorted in descending order by the total actual payment amount? I need to know which loans have the highest total actual payments."}
{"complexity": "Complex", "sql_query": "SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM actual_payment ap INNER JOIN loans l ON ap.loan_id = l.loan_id INNER JOIN borrower b ON l.borrower_id = b.borrower_id WHERE b.country = 'INDONESIA' AND ap.actual_payment_date IS NOT NULL AND ap.actual_principal > 0 AND ap.actual_interest > 0 ORDER BY ap.actual_payment_date DESC;", "style": "Vague", "question": "What are the loan IDs, schedule numbers, actual payment dates, principal amounts, interest amounts, and interest VATs for payments made by Indonesian borrowers with non-zero principal and interest amounts, listed in order of most recent payments first?"}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(actual_principal) AS total_actual_principal FROM actual_payment WHERE actual_payment_date > '2024-01-01' GROUP BY loan_id ORDER BY total_actual_principal DESC;", "style": "Concise", "question": "What are the loan IDs and their total actual principal paid after January 1, 2024, sorted by the total actual principal in descending order?"}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country, b.\"state/province/city\" FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentSchedules AS ( SELECT ep.loan_id, ep.schedule_number, ep.scheduled_installment_date, ep.scheduled_principal, ep.scheduled_interest, ep.scheduled_tax FROM public.expected_payment ep ), ActualPayments AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, ps.scheduled_installment_date, COALESCE(ap.actual_payment_date, ps.scheduled_installment_date) AS payment_date, ps.scheduled_principal AS scheduled_amount, ap.actual_principal AS actual_amount, ps.scheduled_interest AS scheduled_interest, ap.actual_interest AS actual_interest FROM LoanDetails ld INNER JOIN PaymentSchedules ps ON ld.loan_id = ps.loan_id LEFT JOIN ActualPayments ap ON ld.loan_id = ap.loan_id AND ps.schedule_number = ap.schedule_number ORDER BY ld.loan_id, ps.scheduled_installment_date;", "style": "Descriptive", "question": "I want to know the loan IDs, borrower IDs, scheduled installment dates, payment dates, scheduled amounts, actual amounts, scheduled interests, and actual interests for all loans, comparing their scheduled payments with the actual payments made, ordered by loan ID and scheduled installment date."}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.borrower_id, SUM(ap.actual_principal) AS total_principal_paid, SUM(ap.actual_interest) AS total_interest_paid FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.borrower_id ORDER BY total_principal_paid DESC;", "style": "Imperative", "question": "Could you please provide a list of loans, including their IDs, borrower IDs, total principal paid, and total interest paid, sorted by the total principal paid in descending order? I need to know which loans have the highest principal payments first."}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Interrogative", "question": "Could you provide a list of loan IDs, the company names of the borrowers, and the total actual payments made on each loan, ordered from the highest total actual payment to the lowest?"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name AS borrower_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Concise", "question": "What are the loan IDs, borrower names, and total actual payments for all loans, sorted by the total actual payment in descending order?"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id ORDER BY total_actual_payment DESC;", "style": "Colloquial", "question": "Hey! Could you help me find the total actual payments made for each loan in 2024? I'd love to know the loan IDs and the total amount paid for each, sorted by the total amount paid in descending order."}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country, b.\"state/province/city\" FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentSchedules AS ( SELECT ep.loan_id, ep.schedule_number, ep.scheduled_installment_date, ep.scheduled_principal, ep.scheduled_interest, ep.scheduled_tax FROM public.expected_payment ep ), ActualPayments AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, ls.schedule_number, ls.scheduled_principal + ls.scheduled_interest + ls.scheduled_tax AS total_scheduled_payment, ap.actual_principal + ap.actual_interest + ap.actual_interest_vat AS total_actual_payment FROM LoanDetails ld INNER JOIN PaymentSchedules ls ON ld.loan_id = ls.loan_id LEFT JOIN ActualPayments ap ON ld.loan_id = ap.loan_id AND ls.schedule_number = ap.schedule_number ORDER BY ld.loan_id, ls.schedule_number;", "style": "Colloquial", "question": "Hey! Could you help me find the loan details, including borrower information, along with their payment schedules and actual payments made? I'd love to know the loan ID, borrower ID, schedule number, total scheduled payment amount, and total actual payment amount for each schedule, ordered by loan ID and schedule number."}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(actual_principal + actual_interest) AS total_actual_payment FROM actual_payment GROUP BY loan_id ORDER BY total_actual_payment DESC;", "style": "Vague", "question": "What are the loans with the highest total actual payments, and what are their total payment amounts?"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, b.borrower_id, mc.contract_id, ap.schedule_number, ap.actual_payment_date FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.master_contracts mc ON l.loan_id = mc.loan_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE l.loan_id IN ( SELECT loan_id FROM public.loans WHERE loan_amount > 1000000000 ) ORDER BY ap.actual_payment_date;", "style": "Colloquial", "question": "Hey! Could you help me find the loan IDs, borrower IDs, master contract IDs, schedule numbers, and actual payment dates for all loans with an amount over 1 billion? I'd love to know these details sorted by the actual payment date."}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country FROM loans l JOIN borrower b ON l.borrower_id = b.borrower_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM actual_payment ap ), CollateralDetails AS ( SELECT c.loan_id, c.type, c.appraisal_price, cd.motorcycle_id, cd.oem_brand, cd.model_name FROM collateral c JOIN collateral_detailed cd ON c.loan_id = cd.loan_id ) SELECT ld.loan_id, ld.borrower_id, pd.schedule_number, cd.type AS collateral_type FROM LoanDetails ld JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id JOIN CollateralDetails cd ON ld.loan_id = cd.loan_id GROUP BY ld.loan_id, ld.borrower_id, pd.schedule_number, cd.type ORDER BY ld.loan_id, pd.schedule_number;", "style": "Concise", "question": "What are the loan IDs, borrower IDs, payment schedule numbers, and collateral types for all loans, aggregated by loan ID, borrower ID, schedule number, and collateral type, and ordered by loan ID and schedule number?"}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2024 GROUP BY l.loan_id ORDER BY total_actual_payment DESC;", "style": "Concise", "question": "What are the loan IDs and their total actual payments (principal + interest) for loans with payments made in 2024, ordered by the total payment amount from highest to lowest?"}
{"complexity": "Highly Complex", "sql_query": "WITH loan_info AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, b.company_name, b.country FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), payment_info AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ), contract_info AS ( SELECT mc.contract_id, mc.loan_id, mc.contract_date, mc.term, mc.daily_fee_include_vat FROM public.master_contracts mc ) SELECT li.loan_id, li.borrower_id, ci.contract_date, pi.schedule_number, pi.actual_payment_date, pi.actual_principal + pi.actual_interest + pi.actual_interest_vat AS total_payment, li.loan_amount FROM loan_info li INNER JOIN payment_info pi ON li.loan_id = pi.loan_id INNER JOIN contract_info ci ON li.loan_id = ci.loan_id GROUP BY li.loan_id, li.borrower_id, ci.contract_date, pi.schedule_number, pi.actual_payment_date, pi.actual_principal, pi.actual_interest, pi.actual_interest_vat, li.loan_amount ORDER BY li.loan_id, pi.schedule_number;", "style": "Descriptive", "question": "I want to know the loan IDs, borrower IDs, contract dates, schedule numbers, actual payment dates, total payments made (including principal, interest, and VAT), and loan amounts for all loan payments, ordered by loan ID and schedule number."}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, b.company_name, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.company_name ORDER BY total_actual_payment DESC;", "style": "Formal", "question": "Find the loan IDs, company names, and total actual payments (sum of actual principal and actual interest) for all loans, grouped by loan ID and company name, and return them sorted in descending order by the total actual payment."}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, b.borrower_id, SUM(ap.actual_principal) AS total_principal_paid, SUM(ap.actual_interest) AS total_interest_paid FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id GROUP BY l.loan_id, b.borrower_id ORDER BY total_principal_paid DESC;", "style": "Metaphorical", "question": "Which borrowers have paid the most in principal on their loans, and how much principal and interest have they paid in total?"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, ap.actual_payment_date, COALESCE(ap.actual_principal + ap.actual_interest + ap.actual_other_fees + ap.actual_interest_vat, 0) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE ap.actual_payment_date IS NOT NULL AND ap.actual_principal > 0 AND ap.actual_interest > 0 ORDER BY ap.actual_payment_date DESC;", "style": "Multi-turn Dialogue", "question": "[\n  {\"User\": \"I need to find information about loan payments.\"},\n  {\"Assistant\": \"What specific details about loan payments would you like to know?\"},\n  {\"User\": \"I want to know the loan IDs, the dates of the payments, and the total amounts paid.\"},\n  {\"Assistant\": \"Do you want to consider all payments, or are there specific conditions like payment date and amounts that you want to focus on?\"},\n  {\"User\": \"I'm interested in payments where the payment date is known and both the principal and interest are greater than 0.\"},\n  {\"Assistant\": \"Would you like the payments sorted in any particular order?\"},\n  {\"User\": \"Yes, sort them by payment date in descending order, so the most recent payments are first.\"},\n  {\"Assistant\": \"Is there anything else you need to specify about the loan payments?\"},\n  {\"User\": \"No, that's all.\"},\n  {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}\n]"}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, b.company_name, b.country, b.\"state/province/city\" FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentSchedules AS ( SELECT ep.loan_id, ep.schedule_number, ep.scheduled_principal, ep.scheduled_interest, ep.scheduled_tax FROM public.expected_payment ep ), ActualPayments AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, ls.schedule_number, COALESCE(ap.actual_principal, ls.scheduled_principal) AS principal_payment FROM LoanDetails ld INNER JOIN PaymentSchedules ls ON ld.loan_id = ls.loan_id LEFT JOIN ActualPayments ap ON ld.loan_id = ap.loan_id AND ls.schedule_number = ap.schedule_number ORDER BY ld.loan_id, ls.schedule_number LIMIT 1;", "style": "Colloquial", "question": "Hey! Could you help me find the details of the first loan payment? I'd love to know the loan ID, borrower ID, schedule number, and the principal payment amount, whether it was actually paid or just scheduled."}
{"complexity": "Moderate", "sql_query": "SELECT l.loan_id, SUM(ap.actual_principal + ap.actual_interest) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE EXTRACT(YEAR FROM ap.actual_payment_date) = 2025 GROUP BY l.loan_id ORDER BY total_actual_payment DESC;", "style": "Vague", "question": "What are the loan IDs and their corresponding total actual payments for loans in the year 2025, ordered by the total actual payment in descending order?"}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, b.company_name, b.country FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ), CollateralDetails AS ( SELECT c.loan_id, c.type, c.appraisal_price, cd.motorcycle_id, cd.oem_brand FROM public.collateral c INNER JOIN public.collateral_detailed cd ON c.loan_id = cd.loan_id ) SELECT ld.loan_id, ld.borrower_id, pd.schedule_number, cd.type AS collateral_type, SUM(pd.actual_principal + pd.actual_interest) AS total_payment FROM LoanDetails ld INNER JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id INNER JOIN CollateralDetails cd ON ld.loan_id = cd.loan_id GROUP BY ld.loan_id, ld.borrower_id, pd.schedule_number, cd.type ORDER BY ld.loan_id, pd.schedule_number;", "style": "Colloquial", "question": "Hey! Could you help me find detailed loan information, including borrower IDs, schedule numbers, types of collateral, and total payments made for each loan and schedule number? I'd love to know the loan IDs, borrower IDs, schedule numbers, collateral types, and the total amount paid, sorted by loan ID and schedule number."}
{"complexity": "Simple", "sql_query": "SELECT loan_id, SUM(scheduled_principal) AS total_scheduled_principal, SUM(scheduled_interest) AS total_scheduled_interest FROM expected_payment WHERE loan_id IN ( SELECT loan_id FROM loans WHERE loan_type = 'Amortizing' ) GROUP BY loan_id ORDER BY total_scheduled_principal DESC;", "style": "Multi-turn Dialogue", "question": "[\n  {\"User\": \"I need to find the total scheduled principal and interest for amortizing loans.\"},\n  {\"Assistant\": \"What specific information do you want to know about these loans?\"},\n  {\"User\": \"I want to know the loan IDs, total scheduled principal, and total scheduled interest.\"},\n  {\"Assistant\": \"Do you want to filter these loans by any specific type or condition?\"},\n  {\"User\": \"Only amortizing loans.\"},\n  {\"Assistant\": \"How would you like the results sorted?\"},\n  {\"User\": \"Sort them by total scheduled principal in descending order.\"},\n  {\"Assistant\": \"Is there anything else you need?\"},\n  {\"User\": \"No.\"},\n  {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}\n]"}
{"complexity": "Highly Complex", "sql_query": "WITH loan_info AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, b.company_name, b.country FROM public.loans l INNER JOIN public.borrower b ON l.borrower_id = b.borrower_id ), payment_info AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ), delivery_info AS ( SELECT bd.loan_id, bd.introduction_id, bd.contract_id, bd.first_month_evs, bd.first_month_days, bd.first_month_total_usage FROM public.bike_deliveries_first bd ) SELECT li.loan_id, li.borrower_id, pi.schedule_number, di.first_month_evs FROM loan_info li INNER JOIN payment_info pi ON li.loan_id = pi.loan_id INNER JOIN delivery_info di ON li.loan_id = di.loan_id WHERE li.loan_amount > 1000000 AND pi.actual_payment_date > '2024-01-01' AND di.first_month_evs > 100 ORDER BY li.loan_id, pi.schedule_number;", "style": "Descriptive", "question": "I want to find the loan IDs, borrower IDs, payment schedule numbers, and first month EVS values for loans with an amount greater than 1,000,000, where the actual payment date is after January 1, 2024, and the first month's EVS is greater than 100. The results should be ordered by loan ID and payment schedule number."}
{"complexity": "Highly Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, l.term, l.term_unit, mc.contract_id, mc.total_receivable_include_vat, mc.total_receivable_exclude_vat, mc.total_principal, mc.total_vat FROM public.loans l INNER JOIN public.master_contracts mc ON l.loan_id = mc.loan_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM public.actual_payment ap ), CollateralDetails AS ( SELECT c.loan_id, c.collateral_id, cd.motorcycle_id, cd.oem_brand, cd.model_name FROM public.collateral c INNER JOIN public.collateral_detailed cd ON c.loan_id = cd.loan_id ) SELECT ld.loan_id, ld.borrower_id, ld.total_receivable_include_vat, pd.actual_payment_date FROM LoanDetails ld INNER JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id INNER JOIN CollateralDetails cd ON ld.loan_id = cd.loan_id GROUP BY ld.loan_id, ld.borrower_id, ld.total_receivable_include_vat, pd.actual_payment_date ORDER BY ld.loan_id, pd.actual_payment_date;", "style": "Concise", "question": "What are the loan IDs, borrower IDs, total receivables including VAT, and actual payment dates for loans, including their payment and collateral details?"}
{"complexity": "Complex", "sql_query": "SELECT l.loan_id, ap.actual_payment_date, COALESCE(ap.actual_principal + ap.actual_interest + ap.actual_other_fees + ap.actual_interest_vat, 0) AS total_actual_payment FROM public.loans l INNER JOIN public.actual_payment ap ON l.loan_id = ap.loan_id WHERE ap.loan_id_schedule LIKE 'G-V-SM-2024003-%' ORDER BY ap.actual_payment_date;", "style": "Interrogative", "question": "Could you provide the loan IDs, actual payment dates, and total actual payments for all loans with a schedule ID starting with 'G-V-SM-2024003-', sorted by the actual payment date?"}
{"complexity": "Complex", "sql_query": "WITH LoanDetails AS ( SELECT l.loan_id, l.borrower_id, l.loan_amount, l.effective_interest_rate, bc.contract_id, bc.term, bc.daily_fee_include_vat, bc.number_of_evs FROM loans l JOIN master_contracts bc ON l.loan_id = bc.loan_id ), PaymentDetails AS ( SELECT ap.loan_id, ap.schedule_number, ap.actual_payment_date, ap.actual_principal, ap.actual_interest, ap.actual_interest_vat FROM actual_payment ap ) SELECT ld.loan_id, ld.borrower_id, SUM(pd.actual_principal + pd.actual_interest + pd.actual_interest_vat) AS total_payment FROM LoanDetails ld JOIN PaymentDetails pd ON ld.loan_id = pd.loan_id GROUP BY ld.loan_id, ld.borrower_id ORDER BY ld.loan_id;", "style": "Colloquial", "question": "Hey! Could you help me find the total payments made for each loan, including the principal, interest, and VAT on interest? I'd love to know the loan IDs, borrower IDs, and the total amount paid for each loan, ordered by loan ID."}
